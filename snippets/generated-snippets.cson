'.policy.json':

  'Id':
    'prefix': 'Id'
    'body': '"Id" : "StatementId"'

  'Version':
    'prefix': 'Version'
    'body': '"Version" : "2012-10-17"'

  'Statement':
    'prefix': 'Statement'
    'body': """
      "Statement" : [
        {
          "Effect": "Allow",
          "Action": [
            "${1:ec2:...}"
          ],
          "Resource": "${2:arn:...}",
          "Condition": {$3}
        }
      ]
    """

  'IP Condition':
    'prefix': 'IpAddress'
    'body': """
      "IpAddress": {
        "aws:SourceIp": [
          "${1:1.2.3.4/25}"
        ]
      }
    """

  'IP Condition If Exists':
    'prefix': 'IpAddressIfExists'
    'body': """
      "IpAddressIfExists": {
        "aws:SourceIp": [
          "${1:1.2.3.4/25}"
        ]
      }
    """
  'All dms Actions':
    'prefix': 'dms:'
    'body': """
      "dms:AddTagsToResource",
      "dms:CreateEndpoint",
      "dms:CreateReplicationInstance",
      "dms:CreateReplicationSubnetGroup",
      "dms:CreateReplicationTask",
      "dms:DeleteEndpoint",
      "dms:DeleteReplicationInstance",
      "dms:DeleteReplicationSubnetGroup",
      "dms:DeleteReplicationTask",
      "dms:DescribeAccountAttributes",
      "dms:DescribeConnections",
      "dms:DescribeEndpointTypes",
      "dms:DescribeEndpoints",
      "dms:DescribeOrderableReplicationInstances",
      "dms:DescribeRefreshSchemasStatus",
      "dms:DescribeReplicationInstances",
      "dms:DescribeReplicationSubnetGroups",
      "dms:DescribeReplicationTasks",
      "dms:DescribeSchemas",
      "dms:DescribeTableStatistics",
      "dms:ListTagsForResource",
      "dms:ModifyEndpoint",
      "dms:ModifyReplicationInstance",
      "dms:ModifyReplicationSubnetGroup",
      "dms:RefreshSchemas",
      "dms:RemoveTagsFromResource",
      "dms:StartReplicationTask",
      "dms:StopReplicationTask",
      "dms:TestConnection",
    """

  'All mobiletargeting Actions':
    'prefix': 'mobiletargeting:'
    'body': """
      "mobiletargeting:CreateImportJob",
      "mobiletargeting:CreateCampaign",
      "mobiletargeting:CreateSegment",
      "mobiletargeting:DeleteAdmChannel",
      "mobiletargeting:DeleteApnsChannel",
      "mobiletargeting:DeleteApnsSandboxChannel",
      "mobiletargeting:DeleteCampaign",
      "mobiletargeting:DeleteGcmChannel",
      "mobiletargeting:DeleteSegment",
      "mobiletargeting:GetAdmChannel",
      "mobiletargeting:GetApnsChannel",
      "mobiletargeting:GetApnsSandboxChannel",
      "mobiletargeting:GetApplicationSettings",
      "mobiletargeting:GetCampaign",
      "mobiletargeting:GetCampaignActivities",
      "mobiletargeting:GetCampaigns",
      "mobiletargeting:GetCampaignVersion",
      "mobiletargeting:GetCampaignVersions",
      "mobiletargeting:GetEndpoint",
      "mobiletargeting:GetGcmChannel",
      "mobiletargeting:GetImportJob",
      "mobiletargeting:GetImportJobs",
      "mobiletargeting:GetReports",
      "mobiletargeting:GetSegment",
      "mobiletargeting:GetSegmentImportJobs",
      "mobiletargeting:GetSegments",
      "mobiletargeting:GetSegmentVersion",
      "mobiletargeting:GetSegmentVersions",
      "mobiletargeting:UpdateAdmChannel",
      "mobiletargeting:UpdateApnsChannel",
      "mobiletargeting:UpdateApnsSandboxChannel",
      "mobiletargeting:UpdateApplicationSettings",
      "mobiletargeting:UpdateCampaign",
      "mobiletargeting:UpdateEndpoint",
      "mobiletargeting:UpdateEndpointsBatch",
      "mobiletargeting:UpdateGcmChannel",
      "mobiletargeting:UpdateSegment",
    """

  'All acm Actions':
    'prefix': 'acm:'
    'body': """
      "acm:AddTagsToCertificate",
      "acm:DeleteCertificate",
      "acm:DescribeCertificate",
      "acm:GetCertificate",
      "acm:ImportCertificate",
      "acm:ListCertificates",
      "acm:ListTagsForCertificate",
      "acm:RemoveTagsFromCertificate",
      "acm:RequestCertificate",
      "acm:ResendValidationEmail",
    """

  'All tag Actions':
    'prefix': 'tag:'
    'body': """
      "tag:AddResourceTags",
      "tag:GetResources",
      "tag:GetTagKeys",
      "tag:GetTagValues",
      "tag:RemoveResourceTags",
      "tag:TagResources",
      "tag:UntagResources",
    """

  'All ecr Actions':
    'prefix': 'ecr:'
    'body': """
      "ecr:BatchCheckLayerAvailability",
      "ecr:BatchDeleteImage",
      "ecr:BatchGetImage",
      "ecr:CompleteLayerUpload",
      "ecr:CreateRepository",
      "ecr:DeleteRepository",
      "ecr:DeleteRepositoryPolicy",
      "ecr:DescribeRepositories",
      "ecr:GetAuthorizationToken",
      "ecr:GetDownloadUrlForLayer",
      "ecr:GetRepositoryPolicy",
      "ecr:InitiateLayerUpload",
      "ecr:ListImages",
      "ecr:PutImage",
      "ecr:SetRepositoryPolicy",
      "ecr:UploadLayerPart",
    """

  'All execute-api Actions':
    'prefix': 'execute-api:'
    'body': """
      "execute-api:Invoke",
      "execute-api:InvalidateCache",
    """

  'All apigateway Actions':
    'prefix': 'apigateway:'
    'body': """
      "apigateway:DELETE",
      "apigateway:GET",
      "apigateway:HEAD",
      "apigateway:OPTIONS",
      "apigateway:PATCH",
      "apigateway:POST",
      "apigateway:PUT",
    """

  'All discovery Actions':
    'prefix': 'discovery:'
    'body': """
      "discovery:CreateTags",
      "discovery:DeleteTags",
      "discovery:DescribeAgents",
      "discovery:DescribeConfigurations",
      "discovery:DescribeExportConfigurations",
      "discovery:DescribeTags",
      "discovery:ExportConfigurations",
      "discovery:ListConfigurations",
      "discovery:StartDataCollectionByAgentIds",
      "discovery:StopDataCollectionByAgentIds",
    """

  'All appstream Actions':
    'prefix': 'appstream:'
    'body': """
      "appstream:AssociateFleet",
      "appstream:CreateFleet",
      "appstream:CreateDirectoryConfig",
      "appstream:CreateStack",
      "appstream:CreateStreamingURL",
      "appstream:DeleteDirectoryConfig",
      "appstream:DeleteFleet",
      "appstream:DeleteStack",
      "appstream:DescribeDirectoryConfigs",
      "appstream:DescribeFleets",
      "appstream:DescribeImages",
      "appstream:DescribeSessions",
      "appstream:DescribeStacks",
      "appstream:DisassociateFleet",
      "appstream:ExpireSession",
      "appstream:ListAssociatedFleets",
      "appstream:ListAssociatedStacks",
      "appstream:StartFleet",
      "appstream:StopFleet",
      "appstream:UpdateDirectoryConfig",
      "appstream:UpdateFleet",
      "appstream:UpdateStack",
    """

  'All batch Actions':
    'prefix': 'batch:'
    'body': """
      "batch:CancelJob",
      "batch:CreateComputeEnvironment",
      "batch:CreateJobQueue",
      "batch:DeleteComputeEnvironment",
      "batch:DeleteJobQueue",
      "batch:DeregisterJobDefinition",
      "batch:DescribeComputeEnvironments",
      "batch:DescribeJobDefinitions",
      "batch:DescribeJobQueues",
      "batch:DescribeJobs",
      "batch:ListJobs",
      "batch:RegisterJobDefinition",
      "batch:SubmitJob",
      "batch:TerminateJob",
      "batch:UpdateComputeEnvironment",
      "batch:UpdateJobQueue",
    """

  'All lex Actions':
    'prefix': 'lex:'
    'body': """
      "lex:CreateBotVersion",
      "lex:CreateIntentVersion",
      "lex:CreateSlotTypeVersion",
      "lex:DeleteBot",
      "lex:DeleteBotAlias",
      "lex:DeleteBotChannelAssociation",
      "lex:DeleteBotVersion",
      "lex:DeleteIntent",
      "lex:DeleteIntentVersion",
      "lex:DeleteSlotType",
      "lex:DeleteSlotTypeVersion",
      "lex:DeleteUtterances",
      "lex:GetBot",
      "lex:GetBotAlias",
      "lex:GetBotAliases",
      "lex:GetBotChannelAssociation",
      "lex:GetBotChannelAssociations",
      "lex:GetBuiltinIntent",
      "lex:GetBuiltinIntents",
      "lex:GetBuiltinSlotTypes",
      "lex:GetBots",
      "lex:GetBotVersions",
      "lex:GetIntent",
      "lex:GetIntents",
      "lex:GetIntentVersions",
      "lex:GetSlotType",
      "lex:GetSlotTypes",
      "lex:GetSlotTypeVersions",
      "lex:GetUtterancesView",
      "lex:PostContent",
      "lex:PostText",
      "lex:PutBot",
      "lex:PutBotAlias",
      "lex:PutIntent",
      "lex:PutSlotType",
    """

  'All polly Actions':
    'prefix': 'polly:'
    'body': """
      "polly:DeleteLexicon",
      "polly:DescribeVoices",
      "polly:GetLexicon",
      "polly:ListLexicons",
      "polly:PutLexicon",
      "polly:SynthesizeSpeech",
    """

  'All application-autoscaling Actions':
    'prefix': 'application-autoscaling:'
    'body': """
      "application-autoscaling:DeleteScalingPolicy",
      "application-autoscaling:DeregisterScalableTarget",
      "application-autoscaling:DescribeScalableTargets",
      "application-autoscaling:DescribeScalingActivities",
      "application-autoscaling:DescribeScalingPolicies",
      "application-autoscaling:PutScalingPolicy",
      "application-autoscaling:RegisterScalableTarget",
    """

  'All autoscaling Actions':
    'prefix': 'autoscaling:'
    'body': """
      "autoscaling:AttachInstances",
      "autoscaling:AttachLoadBalancers",
      "autoscaling:CompleteLifecycleAction",
      "autoscaling:CreateAutoScalingGroup",
      "autoscaling:CreateLaunchConfiguration",
      "autoscaling:CreateOrUpdateTags",
      "autoscaling:DeleteAutoScalingGroup",
      "autoscaling:DeleteLaunchConfiguration",
      "autoscaling:DeleteLifecycleHook",
      "autoscaling:DeleteNotificationConfiguration",
      "autoscaling:DeletePolicy",
      "autoscaling:DeleteScheduledAction",
      "autoscaling:DeleteTags",
      "autoscaling:DescribeAccountLimits",
      "autoscaling:DescribeAdjustmentTypes",
      "autoscaling:DescribeAutoScalingGroups",
      "autoscaling:DescribeAutoScalingInstances",
      "autoscaling:DescribeAutoScalingNotificationTypes",
      "autoscaling:DescribeLaunchConfigurations",
      "autoscaling:DescribeLifecycleHookTypes",
      "autoscaling:DescribeLifecycleHooks",
      "autoscaling:DescribeLoadBalancers",
      "autoscaling:DescribeMetricCollectionTypes",
      "autoscaling:DescribeNotificationConfigurations",
      "autoscaling:DescribePolicies",
      "autoscaling:DescribeScalingActivities",
      "autoscaling:DescribeScalingProcessTypes",
      "autoscaling:DescribeScheduledActions",
      "autoscaling:DescribeTags",
      "autoscaling:DescribeTerminationPolicyTypes",
      "autoscaling:DetachInstances",
      "autoscaling:DetachLoadBalancers",
      "autoscaling:DisableMetricsCollection",
      "autoscaling:EnableMetricsCollection",
      "autoscaling:EnterStandby",
      "autoscaling:ExecutePolicy",
      "autoscaling:ExitStandby",
      "autoscaling:PutLifecycleHook",
      "autoscaling:PutNotificationConfiguration",
      "autoscaling:PutScalingPolicy",
      "autoscaling:PutScheduledUpdateGroupAction",
      "autoscaling:RecordLifecycleActionHeartbeat",
      "autoscaling:ResumeProcesses",
      "autoscaling:SetDesiredCapacity",
      "autoscaling:SetInstanceHealth",
      "autoscaling:SetInstanceProtection",
      "autoscaling:SuspendProcesses",
      "autoscaling:TerminateInstanceInAutoScalingGroup",
      "autoscaling:UpdateAutoScalingGroup",
    """

  'All budgets Actions':
    'prefix': 'budgets:'
    'body': """
      "budgets:ViewBudget",
      "budgets:ModifyBudget",
    """

  'All devicefarm Actions':
    'prefix': 'devicefarm:'
    'body': """
      "devicefarm:CreateDevicePool",
      "devicefarm:CreateNetworkProfile",
      "devicefarm:CreateProject",
      "devicefarm:CreateRemoteAccessSession",
      "devicefarm:CreateUpload",
      "devicefarm:DeleteDevicePool",
      "devicefarm:DeleteNetworkProfile",
      "devicefarm:DeleteProject",
      "devicefarm:DeleteRemoteAccessSession",
      "devicefarm:DeleteRun",
      "devicefarm:DeleteUpload",
      "devicefarm:GetAccountSettings",
      "devicefarm:GetDevice",
      "devicefarm:GetDevicePool",
      "devicefarm:GetDevicePoolCompatibility",
      "devicefarm:GetJob",
      "devicefarm:GetNetworkProfile",
      "devicefarm:GetOfferingStatus",
      "devicefarm:GetProject",
      "devicefarm:GetRemoteAccessSession",
      "devicefarm:GetRun",
      "devicefarm:GetSuite",
      "devicefarm:GetTest",
      "devicefarm:GetUpload",
      "devicefarm:InstallToRemoteAccessSession",
      "devicefarm:ListArtifacts",
      "devicefarm:ListDevicePools",
      "devicefarm:ListDevices",
      "devicefarm:ListJobs",
      "devicefarm:ListNetworkProfiles",
      "devicefarm:ListOfferingTransactions",
      "devicefarm:ListOfferings",
      "devicefarm:ListProjects",
      "devicefarm:ListRemoteAccessSessions",
      "devicefarm:ListRuns",
      "devicefarm:ListSamples",
      "devicefarm:ListSuites",
      "devicefarm:ListTests",
      "devicefarm:ListUniqueProblems",
      "devicefarm:ListUploads",
      "devicefarm:PurchaseOffering",
      "devicefarm:RenewOffering",
      "devicefarm:ScheduleRun",
      "devicefarm:StopRemoteAccessSession",
      "devicefarm:StopRun",
      "devicefarm:UpdateDevicePool",
      "devicefarm:UpdateNetworkProfile",
      "devicefarm:UpdateProject",
    """

  'All elasticloadbalancing Actions':
    'prefix': 'elasticloadbalancing:'
    'body': """
      "elasticloadbalancing:AddTags",
      "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
      "elasticloadbalancing:AttachLoadBalancerToSubnets",
      "elasticloadbalancing:ConfigureHealthCheck",
      "elasticloadbalancing:CreateAppCookieStickinessPolicy",
      "elasticloadbalancing:CreateListener",
      "elasticloadbalancing:CreateLBCookieStickinessPolicy",
      "elasticloadbalancing:CreateLoadBalancer",
      "elasticloadbalancing:CreateLoadBalancerListeners",
      "elasticloadbalancing:CreateLoadBalancerPolicy",
      "elasticloadbalancing:CreateRule",
      "elasticloadbalancing:CreateTargetGroup",
      "elasticloadbalancing:DeleteListener",
      "elasticloadbalancing:DeleteLoadBalancer",
      "elasticloadbalancing:DeleteLoadBalancerListeners",
      "elasticloadbalancing:DeleteLoadBalancerPolicy",
      "elasticloadbalancing:DeleteRule",
      "elasticloadbalancing:DeleteTargetGroup",
      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
      "elasticloadbalancing:DeregisterTargets",
      "elasticloadbalancing:DescribeInstanceHealth",
      "elasticloadbalancing:DescribeListeners",
      "elasticloadbalancing:DescribeLoadBalancerAttributes",
      "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
      "elasticloadbalancing:DescribeLoadBalancerPolicies",
      "elasticloadbalancing:DescribeLoadBalancers",
      "elasticloadbalancing:DescribeRules",
      "elasticloadbalancing:DescribeSSLPolicies",
      "elasticloadbalancing:DescribeTags",
      "elasticloadbalancing:DescribeTargetGroupAttributes",
      "elasticloadbalancing:DescribeTargetGroups",
      "elasticloadbalancing:DescribeTargetHealth",
      "elasticloadbalancing:DetachLoadBalancerFromSubnets",
      "elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer",
      "elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer",
      "elasticloadbalancing:ModifyListener",
      "elasticloadbalancing:ModifyLoadBalancerAttributes",
      "elasticloadbalancing:ModifyRule",
      "elasticloadbalancing:ModifyTargetGroup",
      "elasticloadbalancing:ModifyTargetGroupAttributes",
      "elasticloadbalancing:RegisterTargets",
      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
      "elasticloadbalancing:RemoveTags",
      "elasticloadbalancing:SetLoadBalancerListenerSSLCertificate",
      "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
      "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
      "elasticloadbalancing:SetRulePriorities",
      "elasticloadbalancing:SetSecurityGroups",
      "elasticloadbalancing:SetSubnets",
    """

  'All cloudhsm Actions':
    'prefix': 'cloudhsm:'
    'body': """
      "cloudhsm:AddTagsToResource",
      "cloudhsm:CreateLunaClient",
      "cloudhsm:CreateHapg",
      "cloudhsm:CreateHsm",
      "cloudhsm:DeleteLunaClient",
      "cloudhsm:DeleteHapg",
      "cloudhsm:DeleteHsm",
      "cloudhsm:DescribeLunaClient",
      "cloudhsm:DescribeHapg",
      "cloudhsm:DescribeHsm",
      "cloudhsm:GetConfig",
      "cloudhsm:ListAvailableZones",
      "cloudhsm:ListLunaClients",
      "cloudhsm:ListHapgs",
      "cloudhsm:ListHsms",
      "cloudhsm:ListTagsForResource",
      "cloudhsm:ModifyLunaClient",
      "cloudhsm:ModifyHapg",
      "cloudhsm:ModifyHsm",
      "cloudhsm:RemoveTagsFromResource",
    """

  'All elasticbeanstalk Actions':
    'prefix': 'elasticbeanstalk:'
    'body': """
      "elasticbeanstalk:AddTags",
      "elasticbeanstalk:ApplyEnvironmentManagedAction",
      "elasticbeanstalk:CheckDNSAvailability",
      "elasticbeanstalk:CreateApplication",
      "elasticbeanstalk:CreateApplicationVersion",
      "elasticbeanstalk:CreateConfigurationTemplate",
      "elasticbeanstalk:CreateEnvironment",
      "elasticbeanstalk:CreateStorageLocation",
      "elasticbeanstalk:DeleteApplication",
      "elasticbeanstalk:DeleteApplicationVersion",
      "elasticbeanstalk:DeleteConfigurationTemplate",
      "elasticbeanstalk:DeleteEnvironmentConfiguration",
      "elasticbeanstalk:DescribeApplicationVersions",
      "elasticbeanstalk:DescribeApplications",
      "elasticbeanstalk:DescribeConfigurationOptions",
      "elasticbeanstalk:DescribeConfigurationSettings",
      "elasticbeanstalk:DescribeEnvironmentHealth",
      "elasticbeanstalk:DescribeEnvironmentManagedActions",
      "elasticbeanstalk:DescribeEnvironmentManagedActionHistory",
      "elasticbeanstalk:DescribeEnvironmentResources",
      "elasticbeanstalk:DescribeEnvironments",
      "elasticbeanstalk:DescribeEvents",
      "elasticbeanstalk:DescribeInstancesHealth",
      "elasticbeanstalk:ListAvailableSolutionStacks",
      "elasticbeanstalk:ListTagsForResource",
      "elasticbeanstalk:RebuildEnvironment",
      "elasticbeanstalk:RemoveTags",
      "elasticbeanstalk:RequestEnvironmentInfo",
      "elasticbeanstalk:RestartAppServer",
      "elasticbeanstalk:RetrieveEnvironmentInfo",
      "elasticbeanstalk:SwapEnvironmentCNAMEs",
      "elasticbeanstalk:TerminateEnvironment",
      "elasticbeanstalk:UpdateApplication",
      "elasticbeanstalk:UpdateApplicationResourceLifecycle",
      "elasticbeanstalk:UpdateApplicationVersion",
      "elasticbeanstalk:UpdateConfigurationTemplate",
      "elasticbeanstalk:UpdateEnvironment",
      "elasticbeanstalk:ValidateConfigurationSettings",
    """

  'All route53 Actions':
    'prefix': 'route53:'
    'body': """
      "route53:AssociateVPCWithHostedZone",
      "route53:ChangeResourceRecordSets",
      "route53:ChangeTagsForResource",
      "route53:CreateHealthCheck",
      "route53:CreateHostedZone",
      "route53:CreateReusableDelegationSet",
      "route53:CreateTrafficPolicy",
      "route53:CreateTrafficPolicyInstance",
      "route53:CreateTrafficPolicyVersion",
      "route53:CreateVPCAssociationAuthorization",
      "route53:DeleteHealthCheck",
      "route53:DeleteHostedZone",
      "route53:DeleteReusableDelegationSet",
      "route53:DeleteTrafficPolicy",
      "route53:DeleteTrafficPolicyInstance",
      "route53:DeleteVPCAssociationAuthorization",
      "route53:DisableDomainAutoRenew",
      "route53:DisassociateVPCFromHostedZone",
      "route53:EnableDomainAutoRenew",
      "route53:GetChange",
      "route53:GetCheckerIpRanges",
      "route53:GetGeoLocation",
      "route53:GetHealthCheck",
      "route53:GetHealthCheckCount",
      "route53:GetHealthCheckLastFailureReason",
      "route53:GetHealthCheckStatus",
      "route53:GetHostedZone",
      "route53:GetHostedZoneCount",
      "route53:GetReusableDelegationSet",
      "route53:GetTrafficPolicy",
      "route53:GetTrafficPolicyInstance",
      "route53:GetTrafficPolicyInstanceCount",
      "route53:ListGeoLocations",
      "route53:ListHealthChecks",
      "route53:ListHostedZones",
      "route53:ListHostedZonesByName",
      "route53:ListResourceRecordSets",
      "route53:ListReusableDelegationSets",
      "route53:ListTagsForResource",
      "route53:ListTagsForResources",
      "route53:ListTrafficPolicies",
      "route53:ListTrafficPolicyInstances",
      "route53:ListTrafficPolicyInstancesByHostedZone",
      "route53:ListTrafficPolicyInstancesByPolicy",
      "route53:ListTrafficPolicyVersions",
      "route53:ListVPCAssociationAuthorizations",
      "route53:TestDNSAnswer",
      "route53:UpdateHealthCheck",
      "route53:UpdateHostedZoneComment",
      "route53:UpdateTrafficPolicyComment",
      "route53:UpdateTrafficPolicyInstance",
    """

  'All cloudformation Actions':
    'prefix': 'cloudformation:'
    'body': """
      "cloudformation:CancelUpdateStack",
      "cloudformation:ContinueUpdateRollback",
      "cloudformation:CreateChangeSet",
      "cloudformation:CreateStack",
      "cloudformation:CreateUploadBucket",
      "cloudformation:DeleteStack",
      "cloudformation:DescribeAccountLimits",
      "cloudformation:DescribeChangeSet",
      "cloudformation:DescribeStackEvents",
      "cloudformation:DescribeStackResource",
      "cloudformation:DescribeStackResources",
      "cloudformation:DescribeStacks",
      "cloudformation:EstimateTemplateCost",
      "cloudformation:ExecuteChangeSet",
      "cloudformation:GetStackPolicy",
      "cloudformation:GetTemplate",
      "cloudformation:GetTemplateSummary",
      "cloudformation:ListChangeSets",
      "cloudformation:ListStackResources",
      "cloudformation:ListStacks",
      "cloudformation:PreviewStackUpdate",
      "cloudformation:SetStackPolicy",
      "cloudformation:SignalResource",
      "cloudformation:UpdateStack",
      "cloudformation:ValidateTemplate",
    """

  'All codepipeline Actions':
    'prefix': 'codepipeline:'
    'body': """
      "codepipeline:AcknowledgeJob",
      "codepipeline:AcknowledgeThirdPartyJob",
      "codepipeline:CreateCustomActionType",
      "codepipeline:CreatePipeline",
      "codepipeline:DeleteCustomActionType",
      "codepipeline:DeletePipeline",
      "codepipeline:DisableStageTransition",
      "codepipeline:EnableStageTransition",
      "codepipeline:GetJobDetails",
      "codepipeline:GetPipeline",
      "codepipeline:GetPipelineExecution",
      "codepipeline:GetPipelineState",
      "codepipeline:GetThirdPartyJobDetails",
      "codepipeline:ListActionTypes",
      "codepipeline:ListPipelines",
      "codepipeline:ListPipelineExecutions",
      "codepipeline:PollForJobs",
      "codepipeline:PollForThirdPartyJobs",
      "codepipeline:PutActionRevision",
      "codepipeline:PutApprovalResult",
      "codepipeline:PutJobFailureResult",
      "codepipeline:PutJobSuccessResult",
      "codepipeline:PutThirdPartyJobFailureResult",
      "codepipeline:PutThirdPartyJobSuccessResult",
      "codepipeline:RetryStageExecution",
      "codepipeline:StartPipelineExecution",
      "codepipeline:UpdatePipeline",
    """

  'All clouddirectory Actions':
    'prefix': 'clouddirectory:'
    'body': """
      "clouddirectory:AddFacetToObject",
      "clouddirectory:ApplySchema",
      "clouddirectory:AttachObject",
      "clouddirectory:AttachPolicy",
      "clouddirectory:AttachToIndex",
      "clouddirectory:BatchRead",
      "clouddirectory:BatchWrite",
      "clouddirectory:CreateDirectory",
      "clouddirectory:CreateFacet",
      "clouddirectory:CreateIndex",
      "clouddirectory:CreateObject",
      "clouddirectory:CreateSchema",
      "clouddirectory:DeleteDirectory",
      "clouddirectory:DeleteFacet",
      "clouddirectory:DeleteObject",
      "clouddirectory:DeleteSchema",
      "clouddirectory:DetachFromIndex",
      "clouddirectory:DetachObject",
      "clouddirectory:DetachPolicy",
      "clouddirectory:DisableDirectory",
      "clouddirectory:EnableDirectory",
      "clouddirectory:GetDirectory",
      "clouddirectory:GetFacet",
      "clouddirectory:GetObjectInformation",
      "clouddirectory:GetSchemaAsJson",
      "clouddirectory:ListAppliedSchemaArns",
      "clouddirectory:ListAttachedIndices",
      "clouddirectory:ListDevelopmentSchemaArns",
      "clouddirectory:ListDirectories",
      "clouddirectory:ListFacetAttributes",
      "clouddirectory:ListFacetNames",
      "clouddirectory:ListIndex",
      "clouddirectory:ListObjectAttributes",
      "clouddirectory:ListObjectChildren",
      "clouddirectory:ListObjectParents",
      "clouddirectory:ListObjectPolicies",
      "clouddirectory:ListPolicyAttachments",
      "clouddirectory:ListPublishedSchemaArns",
      "clouddirectory:ListTagsForResource",
      "clouddirectory:LookupPolicy",
      "clouddirectory:PublishSchema",
      "clouddirectory:PutSchemaFromJson",
      "clouddirectory:RemoveFacetFromObject",
      "clouddirectory:TagResource",
      "clouddirectory:UntagResource",
      "clouddirectory:UpdateFacet",
      "clouddirectory:UpdateObjectAttributes",
      "clouddirectory:UpdateSchema",
    """

  'All cloudsearch Actions':
    'prefix': 'cloudsearch:'
    'body': """
      "cloudsearch:BuildSuggesters",
      "cloudsearch:CreateDomain",
      "cloudsearch:DefineAnalysisScheme",
      "cloudsearch:DefineExpression",
      "cloudsearch:DefineIndexField",
      "cloudsearch:DefineIndexFields",
      "cloudsearch:DefineSuggester",
      "cloudsearch:DeleteAnalysisScheme",
      "cloudsearch:DeleteDomain",
      "cloudsearch:DeleteExpression",
      "cloudsearch:DeleteIndexField",
      "cloudsearch:DeleteSuggester",
      "cloudsearch:DescribeAnalysisSchemes",
      "cloudsearch:DescribeAvailabilityOptions",
      "cloudsearch:DescribeDomains",
      "cloudsearch:DescribeExpressions",
      "cloudsearch:DescribeIndexFields",
      "cloudsearch:DescribeScalingParameters",
      "cloudsearch:DescribeServiceAccessPolicies",
      "cloudsearch:DescribeSuggesters",
      "cloudsearch:document",
      "cloudsearch:IndexDocuments",
      "cloudsearch:ListDomainNames",
      "cloudsearch:search",
      "cloudsearch:suggest",
      "cloudsearch:UpdateAvailabilityOptions",
      "cloudsearch:UpdateScalingParameters",
      "cloudsearch:UpdateServiceAccessPolicies",
    """

  'All cloudtrail Actions':
    'prefix': 'cloudtrail:'
    'body': """
      "cloudtrail:AddTags",
      "cloudtrail:CreateTrail",
      "cloudtrail:DeleteTrail",
      "cloudtrail:DescribeTrails",
      "cloudtrail:GetEventSelectors",
      "cloudtrail:GetTrailStatus",
      "cloudtrail:ListPublicKeys",
      "cloudtrail:ListTags",
      "cloudtrail:LookupEvents",
      "cloudtrail:PutEventSelectors",
      "cloudtrail:RemoveTags",
      "cloudtrail:StartLogging",
      "cloudtrail:StopLogging",
      "cloudtrail:UpdateTrail",
    """

  'All config Actions':
    'prefix': 'config:'
    'body': """
      "config:DeleteConfigRule",
      "config:DeleteConfigurationRecorder",
      "config:DeleteDeliveryChannel",
      "config:DeleteEvaluationResults",
      "config:DeliverConfigSnapshot",
      "config:DescribeComplianceByConfigRule",
      "config:DescribeComplianceByResource",
      "config:DescribeConfigRuleEvaluationStatus",
      "config:DescribeConfigRules",
      "config:DescribeConfigurationRecorderStatus",
      "config:DescribeConfigurationRecorders",
      "config:DescribeDeliveryChannelStatus",
      "config:DescribeDeliveryChannels",
      "config:GetComplianceDetailsByConfigRule",
      "config:GetComplianceDetailsByResource",
      "config:GetComplianceSummaryByConfigRule",
      "config:GetComplianceSummaryByResourceType",
      "config:GetResourceConfigHistory",
      "config:GetResources",
      "config:GetTagKeys",
      "config:ListDiscoveredResources",
      "config:PutConfigRule",
      "config:PutConfigurationRecorder",
      "config:PutDeliveryChannel",
      "config:PutEvaluations",
      "config:StartConfigRulesEvaluation",
      "config:StartConfigurationRecorder",
      "config:StopConfigurationRecorder",
    """

  'All codecommit Actions':
    'prefix': 'codecommit:'
    'body': """
      "codecommit:BatchGetRepositories",
      "codecommit:CreateBranch",
      "codecommit:DeleteBranch",
      "codecommit:CreateRepository",
      "codecommit:DeleteRepository",
      "codecommit:GetBlob",
      "codecommit:GetBranch",
      "codecommit:GetCommit",
      "codecommit:GetDifferences",
      "codecommit:GetObjectIdentifier",
      "codecommit:GetReferences",
      "codecommit:GetRepository",
      "codecommit:GetRepositoryTriggers",
      "codecommit:GetTree",
      "codecommit:GitPull",
      "codecommit:GitPush",
      "codecommit:ListBranches",
      "codecommit:ListRepositories",
      "codecommit:PutRepositoryTriggers",
      "codecommit:TestRepositoryTriggers",
      "codecommit:UpdateDefaultBranch",
      "codecommit:UpdateRepositoryDescription",
      "codecommit:UpdateRepositoryName",
    """

  'All codedeploy Actions':
    'prefix': 'codedeploy:'
    'body': """
      "codedeploy:AddTagsToOnPremisesInstances",
      "codedeploy:BatchGetApplicationRevisions",
      "codedeploy:BatchGetApplications",
      "codedeploy:BatchGetDeploymentGroups",
      "codedeploy:BatchGetDeploymentInstances",
      "codedeploy:BatchGetDeployments",
      "codedeploy:BatchGetOnPremisesInstances",
      "codedeploy:CreateApplication",
      "codedeploy:CreateDeployment",
      "codedeploy:CreateDeploymentConfig",
      "codedeploy:CreateDeploymentGroup",
      "codedeploy:DeleteApplication",
      "codedeploy:DeleteDeploymentConfig",
      "codedeploy:DeleteDeploymentGroup",
      "codedeploy:DeregisterOnPremisesInstance",
      "codedeploy:GetApplication",
      "codedeploy:GetApplicationRevision",
      "codedeploy:GetDeployment",
      "codedeploy:GetDeploymentConfig",
      "codedeploy:GetDeploymentGroup",
      "codedeploy:GetDeploymentInstance",
      "codedeploy:GetOnPremisesInstance",
      "codedeploy:ListApplicationRevisions",
      "codedeploy:ListApplications",
      "codedeploy:ListDeploymentConfigs",
      "codedeploy:ListDeploymentGroups",
      "codedeploy:ListDeploymentInstances",
      "codedeploy:ListDeployments",
      "codedeploy:ListOnPremisesInstances",
      "codedeploy:RegisterApplicationRevision",
      "codedeploy:RegisterOnPremisesInstance",
      "codedeploy:RemoveTagsFromOnPremisesInstances",
      "codedeploy:StopDeployment",
      "codedeploy:UpdateApplication",
      "codedeploy:UpdateDeploymentGroup",
    """

  'All elasticfilesystem Actions':
    'prefix': 'elasticfilesystem:'
    'body': """
      "elasticfilesystem:CreateFileSystem",
      "elasticfilesystem:CreateTags",
      "elasticfilesystem:DescribeTags",
      "elasticfilesystem:DeleteTags",
      "elasticfilesystem:CreateMountTarget",
      "elasticfilesystem:ModifyMountTargetSecurityGroups",
      "elasticfilesystem:DescribeMountTargetSecurityGroups",
      "elasticfilesystem:DescribeFileSystems",
      "elasticfilesystem:DescribeMountTargets",
      "elasticfilesystem:DeleteMountTarget",
      "elasticfilesystem:DeleteFileSystem",
    """

  'All elastictranscoder Actions':
    'prefix': 'elastictranscoder:'
    'body': """
      "elastictranscoder:CancelJob",
      "elastictranscoder:CreateJob",
      "elastictranscoder:CreatePipeline",
      "elastictranscoder:CreatePreset",
      "elastictranscoder:DeletePipeline",
      "elastictranscoder:DeletePreset",
      "elastictranscoder:ListJobsByPipeline",
      "elastictranscoder:ListJobsByStatus",
      "elastictranscoder:ListPipelines",
      "elastictranscoder:ListPresets",
      "elastictranscoder:ReadJob",
      "elastictranscoder:ReadPipeline",
      "elastictranscoder:ReadPreset",
      "elastictranscoder:TestRole",
      "elastictranscoder:UpdatePipeline",
      "elastictranscoder:UpdatePipelineNotifications",
      "elastictranscoder:UpdatePipelineStatus",
    """

  'All cloudwatch Actions':
    'prefix': 'cloudwatch:'
    'body': """
      "cloudwatch:DeleteAlarms",
      "cloudwatch:DescribeAlarmHistory",
      "cloudwatch:DescribeAlarms",
      "cloudwatch:DescribeAlarmsForMetric",
      "cloudwatch:DisableAlarmActions",
      "cloudwatch:EnableAlarmActions",
      "cloudwatch:GetMetricData",
      "cloudwatch:GetMetricStatistics",
      "cloudwatch:ListMetrics",
      "cloudwatch:PutMetricAlarm",
      "cloudwatch:PutMetricData",
      "cloudwatch:SetAlarmState",
    """

  'All events Actions':
    'prefix': 'events:'
    'body': """
      "events:DeleteRule",
      "events:DescribeRule",
      "events:DisableRule",
      "events:EnableRule",
      "events:ListRuleNamesByTarget",
      "events:ListRules",
      "events:ListTargetsByRule",
      "events:PutEvents",
      "events:PutRule",
      "events:PutTargets",
      "events:RemoveTargets",
      "events:TestEventPattern",
    """

  'All health Actions':
    'prefix': 'health:'
    'body': """
      "health:DescribeAffectedEntities",
      "health:DescribeEntityAggregates",
      "health:DescribeEventAggregates",
      "health:DescribeEvents",
      "health:DescribeEventDetails",
      "health:DescribeEventTypes",
    """

  'All iam Actions':
    'prefix': 'iam:'
    'body': """
      "iam:AddRoleToInstanceProfile",
      "iam:AddUserToGroup",
      "iam:AddClientIDToOpenIDConnectProvider",
      "iam:AttachGroupPolicy",
      "iam:AttachRolePolicy",
      "iam:AttachUserPolicy",
      "iam:ChangePassword",
      "iam:CreateAccessKey",
      "iam:CreateAccountAlias",
      "iam:CreateGroup",
      "iam:CreateInstanceProfile",
      "iam:CreateLoginProfile",
      "iam:CreateOpenIDConnectProvider",
      "iam:CreatePolicy",
      "iam:CreatePolicyVersion",
      "iam:CreateRole",
      "iam:CreateSAMLProvider",
      "iam:CreateServiceLinkedRole",
      "iam:CreateServiceSpecificCredential",
      "iam:CreateUser",
      "iam:CreateVirtualMFADevice",
      "iam:DeactivateMFADevice",
      "iam:DeleteAccessKey",
      "iam:DeleteAccountAlias",
      "iam:DeleteAccountPasswordPolicy",
      "iam:DeleteGroup",
      "iam:DeleteGroupPolicy",
      "iam:DeleteInstanceProfile",
      "iam:DeleteLoginProfile",
      "iam:DeleteOpenIDConnectProvider",
      "iam:DeletePolicy",
      "iam:DeletePolicyVersion",
      "iam:DeleteRole",
      "iam:DeleteRolePolicy",
      "iam:DeleteSAMLProvider",
      "iam:DeleteSSHPublicKey",
      "iam:DeleteServerCertificate",
      "iam:DeleteServiceLinkedRole",
      "iam:DeleteServiceSpecificCredential",
      "iam:DeleteSigningCertificate",
      "iam:DeleteUser",
      "iam:DeleteUserPolicy",
      "iam:DeleteVirtualMFADevice",
      "iam:DetachGroupPolicy",
      "iam:DetachRolePolicy",
      "iam:DetachUserPolicy",
      "iam:EnableMFADevice",
      "iam:GenerateCredentialReport",
      "iam:GenerateServiceLastAccessedDetails",
      "iam:GetAccessKeyLastUsed",
      "iam:GetAccountAuthorizationDetails",
      "iam:GetAccountPasswordPolicy",
      "iam:GetAccountSummary",
      "iam:GetContextKeysForCustomPolicy",
      "iam:GetContextKeysForPrincipalPolicy",
      "iam:GetCredentialReport",
      "iam:GetGroup",
      "iam:GetGroupPolicy",
      "iam:GetInstanceProfile",
      "iam:GetLoginProfile",
      "iam:GetOpenIDConnectProvider",
      "iam:GetPolicy",
      "iam:GetPolicyVersion",
      "iam:GetRole",
      "iam:GetRolePolicy",
      "iam:GetSAMLProvider",
      "iam:GetSSHPublicKey",
      "iam:GetServerCertificate",
      "iam:GetServiceLastAccessedDetails",
      "iam:GetServiceLastAccessedDetailsWithEntities",
      "iam:GetServiceLinkedRoleDeletionStatus",
      "iam:GetUser",
      "iam:GetUserPolicy",
      "iam:ListAccessKeys",
      "iam:ListAccountAliases",
      "iam:ListAttachedGroupPolicies",
      "iam:ListAttachedRolePolicies",
      "iam:ListAttachedUserPolicies",
      "iam:ListEntitiesForPolicy",
      "iam:ListGroupPolicies",
      "iam:ListGroups",
      "iam:ListGroupsForUser",
      "iam:ListInstanceProfiles",
      "iam:ListInstanceProfilesForRole",
      "iam:ListMFADevices",
      "iam:ListOpenIDConnectProviders",
      "iam:ListPolicies",
      "iam:ListPoliciesGrantingServiceAccess",
      "iam:ListPolicyVersions",
      "iam:ListRolePolicies",
      "iam:ListRoles",
      "iam:ListSAMLProviders",
      "iam:ListSSHPublicKeys",
      "iam:ListServerCertificates",
      "iam:ListServiceSpecificCredentials",
      "iam:ListSigningCertificates",
      "iam:ListUserPolicies",
      "iam:ListUsers",
      "iam:ListVirtualMFADevices",
      "iam:PassRole",
      "iam:PutGroupPolicy",
      "iam:PutRolePolicy",
      "iam:PutUserPolicy",
      "iam:RemoveClientIDFromOpenIDConnectProvider",
      "iam:RemoveRoleFromInstanceProfile",
      "iam:RemoveUserFromGroup",
      "iam:ResetServiceSpecificCredential",
      "iam:ResyncMFADevice",
      "iam:SetDefaultPolicyVersion",
      "iam:SimulateCustomPolicy",
      "iam:SimulatePrincipalPolicy",
      "iam:UpdateAccessKey",
      "iam:UpdateAccountPasswordPolicy",
      "iam:UpdateAssumeRolePolicy",
      "iam:UpdateGroup",
      "iam:UpdateLoginProfile",
      "iam:UpdateOpenIDConnectProviderThumbprint",
      "iam:UpdateRoleDescription",
      "iam:UpdateSAMLProvider",
      "iam:UpdateSSHPublicKey",
      "iam:UpdateServerCertificate",
      "iam:UpdateServiceSpecificCredential",
      "iam:UpdateSigningCertificate",
      "iam:UpdateUser",
      "iam:UploadSSHPublicKey",
      "iam:UploadServerCertificate",
      "iam:UploadSigningCertificate",
    """

  'All importexport Actions':
    'prefix': 'importexport:'
    'body': """
      "importexport:CreateJob",
      "importexport:UpdateJob",
      "importexport:CancelJob",
      "importexport:ListJobs",
      "importexport:GetStatus",
      "importexport:GetShippingLabel",
    """

  'All snowball Actions':
    'prefix': 'snowball:'
    'body': """
      "snowball:CancelCluster",
      "snowball:CancelJob",
      "snowball:CreateAddress",
      "snowball:CreateCluster",
      "snowball:CreateJob",
      "snowball:DescribeAddress",
      "snowball:DescribeAddresses",
      "snowball:DescribeCluster",
      "snowball:DescribeJob",
      "snowball:GetJobManifest",
      "snowball:GetJobUnlockCode",
      "snowball:GetSnowballUsage",
      "snowball:ListClusterJobs",
      "snowball:ListClusters",
      "snowball:ListJobs",
      "snowball:UpdateCluster",
      "snowball:UpdateJob",
    """

  'All kinesis Actions':
    'prefix': 'kinesis:'
    'body': """
      "kinesis:AddTagsToStream",
      "kinesis:CreateStream",
      "kinesis:DecreaseStreamRetentionPeriod",
      "kinesis:DeleteStream",
      "kinesis:DescribeLimits",
      "kinesis:DescribeStream",
      "kinesis:DisableEnhancedMonitoring",
      "kinesis:EnableEnhancedMonitoring",
      "kinesis:GetShardIterator",
      "kinesis:GetRecords",
      "kinesis:IncreaseStreamRetentionPeriod",
      "kinesis:ListStreams",
      "kinesis:ListTagsForStream",
      "kinesis:MergeShards",
      "kinesis:PutRecord",
      "kinesis:PutRecords",
      "kinesis:RemoveTagsFromStream",
      "kinesis:SplitShard",
      "kinesis:StartStreamEncryption",
      "kinesis:StopStreamEncryption",
      "kinesis:UpdateShardCount",
    """

  'All sdb Actions':
    'prefix': 'sdb:'
    'body': """
      "sdb:BatchDeleteAttributes",
      "sdb:BatchPutAttributes",
      "sdb:CreateDomain",
      "sdb:DeleteAttributes",
      "sdb:DeleteDomain",
      "sdb:DomainMetadata",
      "sdb:GetAttributes",
      "sdb:ListDomains",
      "sdb:PutAttributes",
      "sdb:Select",
    """

  'All lambda Actions':
    'prefix': 'lambda:'
    'body': """
      "lambda:AddPermission",
      "lambda:CreateAlias",
      "lambda:CreateEventSourceMapping",
      "lambda:CreateFunction",
      "lambda:DeleteAlias",
      "lambda:DeleteEventSourceMapping",
      "lambda:DeleteFunction",
      "lambda:GetAccountSettings",
      "lambda:EnableReplication",
      "lambda:GetAlias",
      "lambda:GetEventSourceMapping",
      "lambda:GetFunction",
      "lambda:GetFunctionConfiguration",
      "lambda:GetPolicy",
      "lambda:InvokeAsync",
      "lambda:InvokeFunction",
      "lambda:ListAliases",
      "lambda:ListEventSourceMappings",
      "lambda:ListFunctions",
      "lambda:ListTags",
      "lambda:ListVersionsByFunction",
      "lambda:PublishVersion",
      "lambda:RemovePermission",
      "lambda:TagResource",
      "lambda:UntagResource",
      "lambda:UpdateAlias",
      "lambda:UpdateEventSourceMapping",
      "lambda:UpdateFunctionCode",
      "lambda:UpdateFunctionConfiguration",
    """

  'All mobilehub Actions':
    'prefix': 'mobilehub:'
    'body': """
      "mobilehub:CreateProject",
      "mobilehub:CreateServiceRole",
      "mobilehub:DeleteProject",
      "mobilehub:DescribeBundle",
      "mobilehub:GenerateProjectParameters",
      "mobilehub:GetProject",
      "mobilehub:GetProjectSnapshot",
      "mobilehub:ExportBundle",
      "mobilehub:ExportProject",
      "mobilehub:ListAvailableConnectors",
      "mobilehub:ListAvailableFeatures",
      "mobilehub:ListAvailableRegions",
      "mobilehub:ListBundles",
      "mobilehub:ListProjects",
      "mobilehub:SynchronizeProject",
      "mobilehub:UpdateProject",
      "mobilehub:ValidateProject",
      "mobilehub:VerifyServiceRole",
    """

  'All ssm Actions':
    'prefix': 'ssm:'
    'body': """
      "ssm:AddTagsToResource",
      "ssm:CancelCommand",
      "ssm:CreateActivation",
      "ssm:CreateAssociation",
      "ssm:CreateAssociationBatch",
      "ssm:CreateDocument",
      "ssm:CreateMaintenanceWindow",
      "ssm:CreatePatchBaseline",
      "ssm:DeleteActivation",
      "ssm:DeleteAssociation",
      "ssm:DeleteDocument",
      "ssm:DeleteMaintenanceWindow",
      "ssm:DeleteParameter",
      "ssm:DeletePatchBaseline",
      "ssm:DeregisterManagedInstance",
      "ssm:DeregisterPatchBaselineForPatchGroup",
      "ssm:DeregisterTargetFromMaintenanceWindow",
      "ssm:DeregisterTaskFromMaintenanceWindow",
      "ssm:DescribeActivations",
      "ssm:DescribeAssociation",
      "ssm:DescribeAutomationExecutions",
      "ssm:DescribeAvailablePatches",
      "ssm:DescribeDocument",
      "ssm:DescribeDocumentPermission",
      "ssm:DescribeEffectiveInstanceAssociations",
      "ssm:DescribeEffectivePatchesForPatchBaseline",
      "ssm:DescribeInstanceAssociationsStatus",
      "ssm:DescribeInstanceInformation",
      "ssm:DescribeInstancePatches",
      "ssm:DescribeInstancePatchStates",
      "ssm:DescribeInstancePatchStatesForPatchGroup",
      "ssm:DescribeMaintenanceWindowExecutions",
      "ssm:DescribeMaintenanceWindowExecutionTaskInvocations",
      "ssm:DescribeMaintenanceWindowExecutionTasks",
      "ssm:DescribeMaintenanceWindows",
      "ssm:DescribeMaintenanceWindowTargets",
      "ssm:DescribeMaintenanceWindowTasks",
      "ssm:DescribeParameters",
      "ssm:DescribePatchBaselines",
      "ssm:DescribePatchGroups",
      "ssm:DescribePatchGroupState",
      "ssm:GetAutomationExecution",
      "ssm:GetCommandInvocation",
      "ssm:GetDefaultPatchBaseline",
      "ssm:GetDeployablePatchSnapshotForInstance",
      "ssm:GetInventory",
      "ssm:GetInventorySchema",
      "ssm:GetDocument",
      "ssm:GetMaintenanceWindow",
      "ssm:GetMaintenanceWindowExecution",
      "ssm:GetMaintenanceWindowExecutionTask",
      "ssm:GetManifest",
      "ssm:GetParameterHistory",
      "ssm:GetParameter",
      "ssm:GetParameters",
      "ssm:GetParametersByPath",
      "ssm:GetPatchBaseline",
      "ssm:GetPatchBaselineForPatchGroup",
      "ssm:ListAssociationVersions",
      "ssm:ListAssociations",
      "ssm:ListCommandInvocations",
      "ssm:ListCommands",
      "ssm:ListDocuments",
      "ssm:ListDocumentVersions",
      "ssm:ListInstanceAssociations",
      "ssm:ListInventoryEntries",
      "ssm:ListTagsForResource",
      "ssm:ModifyDocumentPermission",
      "ssm:PutComplianceItems",
      "ssm:PutInventory",
      "ssm:PutParameter",
      "ssm:RegisterDefaultPatchBaseline",
      "ssm:RegisterPatchBaselineForPatchGroup",
      "ssm:RegisterTargetWithMaintenanceWindow",
      "ssm:RegisterTaskWithMaintenanceWindow",
      "ssm:RemoveTagsFromResource",
      "ssm:SendCommand",
      "ssm:StartAssociationsOnce",
      "ssm:StartAutomationExecution",
      "ssm:StopAutomationExecution",
      "ssm:UpdateAssociation",
      "ssm:UpdateAssociationStatus",
      "ssm:UpdateDocument",
      "ssm:UpdateDocumentDefaultVersion",
      "ssm:UpdateInstanceAssociationStatus",
      "ssm:UpdateMaintenanceWindow",
      "ssm:UpdateMaintenanceWindowTarget",
      "ssm:UpdateMaintenanceWindowTask",
      "ssm:UpdateManagedInstanceRole",
      "ssm:UpdatePatchBaseline",
    """

  'All swf Actions':
    'prefix': 'swf:'
    'body': """
      "swf:CancelTimer",
      "swf:CancelWorkflowExecution",
      "swf:CompleteWorkflowExecution",
      "swf:ContinueAsNewWorkflowExecution",
      "swf:CountClosedWorkflowExecutions",
      "swf:CountOpenWorkflowExecutions",
      "swf:CountPendingActivityTasks",
      "swf:CountPendingDecisionTasks",
      "swf:DeprecateActivityType",
      "swf:DeprecateDomain",
      "swf:DeprecateWorkflowType",
      "swf:DescribeActivityType",
      "swf:DescribeDomain",
      "swf:DescribeWorkflowExecution",
      "swf:DescribeWorkflowType",
      "swf:FailWorkflowExecution",
      "swf:GetWorkflowExecutionHistory",
      "swf:ListActivityTypes",
      "swf:ListClosedWorkflowExecutions",
      "swf:ListDomains",
      "swf:ListOpenWorkflowExecutions",
      "swf:ListWorkflowTypes",
      "swf:PollForActivityTask",
      "swf:PollForDecisionTask",
      "swf:RecordActivityTaskHeartbeat",
      "swf:RecordMarker",
      "swf:RegisterActivityType",
      "swf:RegisterDomain",
      "swf:RegisterWorkflowType",
      "swf:RequestCancelActivityTask",
      "swf:RequestCancelExternalWorkflowExecution",
      "swf:RequestCancelWorkflowExecution",
      "swf:RespondActivityTaskCanceled",
      "swf:RespondActivityTaskCompleted",
      "swf:RespondActivityTaskFailed",
      "swf:RespondDecisionTaskCompleted",
      "swf:ScheduleActivityTask",
      "swf:SignalExternalWorkflowExecution",
      "swf:SignalWorkflowExecution",
      "swf:StartChildWorkflowExecution",
      "swf:StartTimer",
      "swf:StartWorkflowExecution",
      "swf:TerminateWorkflowExecution",
    """

  'All storagegateway Actions':
    'prefix': 'storagegateway:'
    'body': """
      "storagegateway:ActivateGateway",
      "storagegateway:AddCache",
      "storagegateway:AddUploadBuffer",
      "storagegateway:AddWorkingStorage",
      "storagegateway:CancelArchival",
      "storagegateway:CancelRetrieval",
      "storagegateway:CreateCachediSCSIVolume",
      "storagegateway:CreateNFSFileShare",
      "storagegateway:CreateSnapshot",
      "storagegateway:CreateSnapshotFromVolumeRecoveryPoint",
      "storagegateway:CreateStorediSCSIVolume",
      "storagegateway:CreateTapes",
      "storagegateway:CreateTapeWithBarcode",
      "storagegateway:DeleteBandwidthRateLimit",
      "storagegateway:DeleteChapCredentials",
      "storagegateway:DeleteFileShare",
      "storagegateway:DeleteGateway",
      "storagegateway:DeleteSnapshotSchedule",
      "storagegateway:DeleteTape",
      "storagegateway:DeleteTapeArchive",
      "storagegateway:DeleteVolume",
      "storagegateway:DescribeBandwidthRateLimit",
      "storagegateway:DescribeCache",
      "storagegateway:DescribeCachediSCSIVolumes",
      "storagegateway:DescribeChapCredentials",
      "storagegateway:DescribeNFSFileShares",
      "storagegateway:DescribeGatewayInformation",
      "storagegateway:DescribeMaintenanceStartTime",
      "storagegateway:DescribeSnapshotSchedule",
      "storagegateway:DescribeStorediSCSIVolumes",
      "storagegateway:DescribeTapeArchives",
      "storagegateway:DescribeTapeRecoveryPoints",
      "storagegateway:DescribeTapes",
      "storagegateway:DescribeUploadBuffer",
      "storagegateway:DescribeVTLDevices",
      "storagegateway:DescribeWorkingStorage",
      "storagegateway:DisableGateway",
      "storagegateway:ListGateways",
      "storagegateway:ListLocalDisks",
      "storagegateway:ListFileShares",
      "storagegateway:ListTagsForResource",
      "storagegateway:ListTapes",
      "storagegateway:ListVolumeRecoveryPoints",
      "storagegateway:ListVolumes",
      "storagegateway:RefreshCache",
      "storagegateway:RetrieveTapeArchive",
      "storagegateway:RetrieveTapeRecoveryPoint",
      "storagegateway:SetLocalConsolePassword",
      "storagegateway:ShutdownGateway",
      "storagegateway:StartGateway",
      "storagegateway:UpdateBandwidthRateLimit",
      "storagegateway:UpdateChapCredentials",
      "storagegateway:UpdateGatewayInformation",
      "storagegateway:UpdateGatewaySoftwareNow",
      "storagegateway:UpdateMaintenanceStartTime",
      "storagegateway:UpdateNFSFileShare",
      "storagegateway:UpdateSnapshotSchedule",
    """

  'All sqs Actions':
    'prefix': 'sqs:'
    'body': """
      "sqs:AddPermission",
      "sqs:ChangeMessageVisibility",
      "sqs:ChangeMessageVisibilityBatch",
      "sqs:CreateQueue",
      "sqs:DeleteMessage",
      "sqs:DeleteMessageBatch",
      "sqs:DeleteQueue",
      "sqs:GetQueueAttributes",
      "sqs:GetQueueUrl",
      "sqs:ListDeadLetterSourceQueues",
      "sqs:ListQueues",
      "sqs:PurgeQueue",
      "sqs:ReceiveMessage",
      "sqs:RemovePermission",
      "sqs:SendMessage",
      "sqs:SendMessageBatch",
      "sqs:SetQueueAttributes",
    """

  'All ses Actions':
    'prefix': 'ses:'
    'body': """
      "ses:CloneReceiptRuleSet",
      "ses:CreateReceiptFilter",
      "ses:CreateReceiptRule",
      "ses:CreateReceiptRuleSet",
      "ses:DeleteIdentity",
      "ses:DeleteIdentityPolicy",
      "ses:DeleteReceiptFilter",
      "ses:DeleteReceiptRule",
      "ses:DeleteReceiptRuleSet",
      "ses:DeleteVerifiedEmailAddress",
      "ses:DescribeActiveReceiptRuleSet",
      "ses:DescribeReceiptRule",
      "ses:DescribeReceiptRuleSet",
      "ses:GetIdentityDkimAttributes",
      "ses:GetIdentityNotificationAttributes",
      "ses:GetIdentityPolicies",
      "ses:GetIdentityVerificationAttributes",
      "ses:GetSendQuota",
      "ses:GetSendStatistics",
      "ses:ListIdentities",
      "ses:ListIdentityPolicies",
      "ses:ListReceiptFilters",
      "ses:ListReceiptRuleSets",
      "ses:ListVerifiedEmailAddresses",
      "ses:PutIdentityPolicy",
      "ses:ReorderReceiptRuleSet",
      "ses:SendBounce",
      "ses:SendEmail",
      "ses:SendRawEmail",
      "ses:SetActiveReceiptRuleSet",
      "ses:SetIdentityDkimEnabled",
      "ses:SetIdentityNotificationTopic",
      "ses:SetIdentityFeedbackForwardingEnabled",
      "ses:SetReceiptRulePosition",
      "ses:UpdateReceiptRule",
      "ses:VerifyDomainDkim",
      "ses:VerifyDomainIdentity",
      "ses:VerifyEmailAddress",
      "ses:VerifyEmailIdentity",
    """

  'All redshift Actions':
    'prefix': 'redshift:'
    'body': """
      "redshift:AuthorizeClusterSecurityGroupIngress",
      "redshift:AuthorizeSnapshotAccess",
      "redshift:CancelQuerySession",
      "redshift:CopyClusterSnapshot",
      "redshift:CreateCluster",
      "redshift:CreateClusterUser",
      "redshift:CreateClusterParameterGroup",
      "redshift:CreateClusterSecurityGroup",
      "redshift:CreateClusterSnapshot",
      "redshift:CreateClusterSubnetGroup",
      "redshift:CreateEventSubscription",
      "redshift:CreateHsmClientCertificate",
      "redshift:CreateHsmConfiguration",
      "redshift:CreateTags",
      "redshift:DeleteCluster",
      "redshift:DeleteClusterParameterGroup",
      "redshift:DeleteClusterSecurityGroup",
      "redshift:DeleteClusterSnapshot",
      "redshift:DeleteClusterSubnetGroup",
      "redshift:DeleteEventSubscription",
      "redshift:DeleteHsmClientCertificate",
      "redshift:DeleteHsmConfiguration",
      "redshift:DeleteTags",
      "redshift:DescribeClusterParameterGroups",
      "redshift:DescribeClusterParameters",
      "redshift:DescribeClusterSecurityGroups",
      "redshift:DescribeClusterSnapshots",
      "redshift:DescribeClusterSubnetGroups",
      "redshift:DescribeClusterVersions",
      "redshift:DescribeClusters",
      "redshift:DescribeDefaultClusterParameters",
      "redshift:DescribeEventCategories",
      "redshift:DescribeEventSubscriptions",
      "redshift:DescribeEvents",
      "redshift:DescribeHsmClientCertificates",
      "redshift:DescribeHsmConfigurations",
      "redshift:DescribeLoggingStatus",
      "redshift:DescribeOrderableClusterOptions",
      "redshift:DescribeReservedNodeOfferings",
      "redshift:DescribeReservedNodes",
      "redshift:DescribeResize",
      "redshift:DescribeTags",
      "redshift:DisableLogging",
      "redshift:DisableSnapshotCopy",
      "redshift:EnableLogging",
      "redshift:EnableSnapshotCopy",
      "redshift:GetClusterCredentials",
      "redshift:JoinGroup",
      "redshift:ModifyCluster",
      "redshift:ModifyClusterParameterGroup",
      "redshift:ModifyClusterSubnetGroup",
      "redshift:ModifyEventSubscription",
      "redshift:ModifySnapshotCopyRetentionPeriod",
      "redshift:PurchaseReservedNodeOffering",
      "redshift:RebootCluster",
      "redshift:ResetClusterParameterGroup",
      "redshift:RestoreFromClusterSnapshot",
      "redshift:RevokeClusterSecurityGroupIngress",
      "redshift:RevokeSnapshotAccess",
      "redshift:RotateEncryptionKey",
      "redshift:ViewQueriesInConsole",
    """

  'All rds Actions':
    'prefix': 'rds:'
    'body': """
      "rds:AddTagsToResource",
      "rds:AddSourceIdentifierToSubscription",
      "rds:ApplyPendingMaintenanceAction",
      "rds:AuthorizeDBSecurityGroupIngress",
      "rds:CopyDBClusterSnapshot",
      "rds:CopyDBParameterGroup",
      "rds:CopyDBSnapshot",
      "rds:CopyOptionGroup",
      "rds:CreateDBClusterParameterGroup",
      "rds:CreateDBClusterSnapshot",
      "rds:CreateDBCluster",
      "rds:CreateDBInstance",
      "rds:CreateDBInstanceReadReplica",
      "rds:CreateDBParameterGroup",
      "rds:CreateDBSecurityGroup",
      "rds:CreateDBSnapshot",
      "rds:CreateDBSubnetGroup",
      "rds:CreateEventSubscription",
      "rds:CreateOptionGroup",
      "rds:DeleteDBClusterParameterGroup",
      "rds:DeleteDBClusterSnapshot",
      "rds:DeleteDBCluster",
      "rds:DeleteDBInstance",
      "rds:DeleteDBParameterGroup",
      "rds:DeleteDBSecurityGroup",
      "rds:DeleteDBSnapshot",
      "rds:DeleteDBSubnetGroup",
      "rds:DeleteEventSubscription",
      "rds:DeleteOptionGroup",
      "rds:DescribeAccountAttributes",
      "rds:DescribeCertificates",
      "rds:DescribeEngineDefaultClusterParameters",
      "rds:DescribeEngineDefaultParameters",
      "rds:DescribeDBClusterParameterGroups",
      "rds:DescribeDBClusterParameters",
      "rds:DescribeDBClusterSnapshots",
      "rds:DescribeDBClusters",
      "rds:DescribeDBInstances",
      "rds:DescribeDBLogFiles",
      "rds:DescribeDBParameterGroups",
      "rds:DescribeDBParameters",
      "rds:DescribeDBSecurityGroups",
      "rds:DescribeDBSnapshotAttributes",
      "rds:DescribeDBSnapshots",
      "rds:DescribeDBEngineVersions",
      "rds:DescribeDBSubnetGroups",
      "rds:DescribeEventCategories",
      "rds:DescribeEvents",
      "rds:DescribeEventSubscriptions",
      "rds:DescribeOptionGroups",
      "rds:DescribeOptionGroupOptions",
      "rds:DescribeOrderableDBInstanceOptions",
      "rds:DescribePendingMaintenanceActions",
      "rds:DescribeReservedDBInstances",
      "rds:DescribeReservedDBInstancesOfferings",
      "rds:DownloadCompleteDBLogFile",
      "rds:DownloadDBLogFilePortion",
      "rds:FailoverDBCluster",
      "rds:ListTagsForResource",
      "rds:ModifyDBClusterParameterGroup",
      "rds:ModifyDBCluster",
      "rds:ModifyDBInstance",
      "rds:ModifyDBParameterGroup",
      "rds:ModifyDBSnapshotAttribute",
      "rds:ModifyDBSubnetGroup",
      "rds:ModifyEventSubscription",
      "rds:ModifyOptionGroup",
      "rds:PromoteReadReplica",
      "rds:PurchaseReservedDBInstancesOffering",
      "rds:RebootDBInstance",
      "rds:RemoveSourceIdentifierFromSubscription",
      "rds:RemoveTagsFromResource",
      "rds:RestoreDBClusterFromSnapshot",
      "rds:RestoreDBClusterToPointInTime",
      "rds:RestoreDBInstanceFromDBSnapshot",
      "rds:RestoreDBInstanceToPointInTime",
      "rds:ResetDBClusterParameterGroup",
      "rds:ResetDBParameterGroup",
      "rds:RevokeDBSecurityGroupIngress",
    """

  'All elasticmapreduce Actions':
    'prefix': 'elasticmapreduce:'
    'body': """
      "elasticmapreduce:AddInstanceGroups",
      "elasticmapreduce:AddTags",
      "elasticmapreduce:AddJobFlowSteps",
      "elasticmapreduce:CreateSecurityConfiguration",
      "elasticmapreduce:DeleteSecurityConfiguration",
      "elasticmapreduce:DescribeCluster",
      "elasticmapreduce:DescribeJobFlows",
      "elasticmapreduce:DescribeSecurityConfiguration",
      "elasticmapreduce:DescribeStep",
      "elasticmapreduce:ListBootstrapActions",
      "elasticmapreduce:ListClusters",
      "elasticmapreduce:ListInstanceGroups",
      "elasticmapreduce:ListInstances",
      "elasticmapreduce:ListSecurityConfigurations",
      "elasticmapreduce:ListSteps",
      "elasticmapreduce:ModifyInstanceGroups",
      "elasticmapreduce:RemoveTags",
      "elasticmapreduce:RunJobFlow",
      "elasticmapreduce:SetTerminationProtection",
      "elasticmapreduce:SetVisibleToAllUsers",
      "elasticmapreduce:TerminateJobFlows",
      "elasticmapreduce:ViewEventsFromAllClustersInConsole",
    """

  'All glue Actions':
    'prefix': 'glue:'
    'body': """
      "glue:BatchCreatePartition",
      "glue:BatchDeleteConnection",
      "glue:BatchDeletePartition",
      "glue:BatchDeleteTable",
      "glue:BatchGetPartition",
      "glue:CreateClassifier",
      "glue:CreateConnection",
      "glue:CreateCrawler",
      "glue:CreateDatabase",
      "glue:CreateDevEndpoint",
      "glue:CreateJob",
      "glue:CreatePartition",
      "glue:CreateScript",
      "glue:CreateTable",
      "glue:CreateTrigger",
      "glue:CreateUserDefinedFunction",
      "glue:DeleteClassifier",
      "glue:DeleteConnection",
      "glue:DeleteCrawler",
      "glue:DeleteDatabase",
      "glue:DeleteDevEndpoint",
      "glue:DeleteJob",
      "glue:DeletePartition",
      "glue:DeleteTable",
      "glue:DeleteTrigger",
      "glue:DeleteUserDefinedFunction",
      "glue:GetCatalogImportStatus",
      "glue:GetClassifier",
      "glue:GetClassifiers",
      "glue:GetConnection",
      "glue:GetConnections",
      "glue:GetCrawler",
      "glue:GetCrawlers",
      "glue:GetCrawlerMetrics",
      "glue:GetDatabase",
      "glue:GetDatabases",
      "glue:GetDataflowGraph",
      "glue:GetDevEndpoint",
      "glue:GetDevEndpoints",
      "glue:GetJob",
      "glue:GetJobs",
      "glue:GetJobRun",
      "glue:GetJobRuns",
      "glue:GetMapping",
      "glue:GetPartition",
      "glue:GetPartitions",
      "glue:GetPlan",
      "glue:GetTable",
      "glue:GetTableVersions",
      "glue:GetTables",
      "glue:GetTrigger",
      "glue:GetTriggers",
      "glue:GetUserDefinedFunction",
      "glue:GetUserDefinedFunctions",
      "glue:ImportCatalogToGlue",
      "glue:ResetJobBookmark",
      "glue:StartCrawler",
      "glue:StartCrawlerSchedule",
      "glue:StartJobRun",
      "glue:StartTrigger",
      "glue:StopCrawler",
      "glue:StopCrawlerSchedule",
      "glue:StopTrigger",
      "glue:UpdateClassifier",
      "glue:UpdateConnection",
      "glue:UpdateCrawler",
      "glue:UpdateDatabase",
      "glue:UpdateDevEndpoint",
      "glue:UpdateJob",
      "glue:UpdatePartition",
      "glue:UpdateTable",
      "glue:UpdateTrigger",
      "glue:UpdateUserDefinedFunction",
    """

  'All greengrass Actions':
    'prefix': 'greengrass:'
    'body': """
      "greengrass:AssociateRoleToGroup",
      "greengrass:AssociateServiceRoleToAccount",
      "greengrass:CreateCoreDefinition",
      "greengrass:CreateCoreDefinitionVersion",
      "greengrass:CreateDeployment",
      "greengrass:CreateDeviceDefinition",
      "greengrass:CreateDeviceDefinitionVersion",
      "greengrass:CreateFunctionDefinition",
      "greengrass:CreateFunctionDefinitionVersion",
      "greengrass:CreateGroup",
      "greengrass:CreateGroupCertificateAuthority",
      "greengrass:CreateGroupVersion",
      "greengrass:CreateLoggerDefinition",
      "greengrass:CreateLoggerDefinitionVersion",
      "greengrass:CreateSubscriptionDefinition",
      "greengrass:CreateSubscriptionDefinitionVersion",
      "greengrass:DeleteCoreDefinition",
      "greengrass:DeleteDeviceDefinition",
      "greengrass:DeleteFunctionDefinition",
      "greengrass:DeleteGroup",
      "greengrass:DeleteLoggerDefinition",
      "greengrass:DeleteSubscriptionDefinition",
      "greengrass:DisassociateRoleFromGroup",
      "greengrass:DisassociateServiceRoleFromAccount",
      "greengrass:GetAssociatedRole",
      "greengrass:GetConnectivityInfo",
      "greengrass:GetCoreDefinition",
      "greengrass:GetCoreDefinitionVersion",
      "greengrass:GetDeploymentStatus",
      "greengrass:GetDeviceDefinition",
      "greengrass:GetDeviceDefinitionVersion",
      "greengrass:GetFunctionDefinition",
      "greengrass:GetFunctionDefinitionVersion",
      "greengrass:GetGroup",
      "greengrass:GetGroupCertificateAuthority",
      "greengrass:GetGroupCertificateConfiguration",
      "greengrass:GetGroupVersion",
      "greengrass:GetLoggerDefinition",
      "greengrass:GetLoggerDefinitionVersion",
      "greengrass:GetServiceRoleForAccount",
      "greengrass:GetSubscriptionDefinition",
      "greengrass:GetSubscriptionDefinitionVersion",
      "greengrass:ListCoreDefinitionVersions",
      "greengrass:ListCoreDefinitions",
      "greengrass:ListDeployments",
      "greengrass:ListDeviceDefinitionVersions",
      "greengrass:ListDeviceDefinitions",
      "greengrass:ListFunctionDefinitionVersions",
      "greengrass:ListFunctionDefinitions",
      "greengrass:ListGroupCertificateAuthorities",
      "greengrass:ListGroupVersions",
      "greengrass:ListGroups",
      "greengrass:ListLoggerDefinitionVersions",
      "greengrass:ListLoggerDefinitions",
      "greengrass:ListSubscriptionDefinitionVersions",
      "greengrass:ListSubscriptionDefinitions",
      "greengrass:ResetDeployments",
      "greengrass:UpdateConnectivityInfo",
      "greengrass:UpdateCoreDefinition",
      "greengrass:UpdateDeviceDefinition",
      "greengrass:UpdateFunctionDefinition",
      "greengrass:UpdateGroup",
      "greengrass:UpdateGroupCertificateConfiguration",
      "greengrass:UpdateLoggerDefinition",
      "greengrass:UpdateSubscriptionDefinition",
    """

  'All sns Actions':
    'prefix': 'sns:'
    'body': """
      "sns:AddPermission",
      "sns:CheckIfPhoneNumberIsOptedOut",
      "sns:ConfirmSubscription",
      "sns:CreatePlatformApplication",
      "sns:CreatePlatformEndpoint",
      "sns:CreateTopic",
      "sns:DeleteEndpoint",
      "sns:DeletePlatformApplication",
      "sns:DeleteTopic",
      "sns:GetEndpointAttributes",
      "sns:GetPlatformApplicationAttributes",
      "sns:GetSMSAttributes",
      "sns:GetSubscriptionAttributes",
      "sns:GetTopicAttributes",
      "sns:ListEndpointsByPlatformApplication",
      "sns:ListPhoneNumbersOptedOut",
      "sns:ListPlatformApplications",
      "sns:ListSubscriptions",
      "sns:ListSubscriptionsByTopic",
      "sns:ListTopics",
      "sns:OptInPhoneNumber",
      "sns:Publish",
      "sns:RemovePermission",
      "sns:SetEndpointAttributes",
      "sns:SetPlatformApplicationAttributes",
      "sns:SetSMSAttributes",
      "sns:SetSubscriptionAttributes",
      "sns:SetTopicAttributes",
      "sns:Subscribe",
      "sns:Unsubscribe",
    """

  'All s3 Actions':
    'prefix': 's3:'
    'body': """
      "s3:AbortMultipartUpload",
      "s3:CreateBucket",
      "s3:DeleteBucket",
      "s3:DeleteBucketPolicy",
      "s3:DeleteBucketWebsite",
      "s3:DeleteObject",
      "s3:DeleteObjectVersion",
      "s3:GetAccelerateConfiguration",
      "s3:GetBucketAcl",
      "s3:GetBucketCORS",
      "s3:GetBucketLocation",
      "s3:GetBucketLogging",
      "s3:GetBucketNotification",
      "s3:GetBucketPolicy",
      "s3:GetBucketRequestPayment",
      "s3:GetBucketTagging",
      "s3:GetBucketVersioning",
      "s3:GetBucketWebsite",
      "s3:GetLifecycleConfiguration",
      "s3:GetObject",
      "s3:GetObjectAcl",
      "s3:GetObjectTagging",
      "s3:GetObjectTorrent",
      "s3:GetObjectVersion",
      "s3:GetObjectVersionAcl",
      "s3:GetObjectVersionTagging",
      "s3:GetObjectVersionTorrent",
      "s3:GetReplicationConfiguration",
      "s3:ListAllMyBuckets",
      "s3:ListBucket",
      "s3:ListBucketMultipartUploads",
      "s3:ListBucketVersions",
      "s3:ListMultipartUploadParts",
      "s3:PutAccelerateConfiguration",
      "s3:PutBucketAcl",
      "s3:PutBucketCORS",
      "s3:PutBucketLogging",
      "s3:PutBucketNotification",
      "s3:PutBucketPolicy",
      "s3:PutBucketRequestPayment",
      "s3:PutBucketTagging",
      "s3:PutBucketVersioning",
      "s3:PutBucketWebsite",
      "s3:PutLifecycleConfiguration",
      "s3:PutReplicationConfiguration",
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:PutObjectTagging",
      "s3:PutObjectVersionAcl",
      "s3:PutObjectVersionTagging",
      "s3:ReplicateDelete",
      "s3:ReplicateObject",
      "s3:RestoreObject",
    """

  'All ec2 Actions':
    'prefix': 'ec2:'
    'body': """
      "ec2:AcceptReservedInstancesExchangeQuote",
      "ec2:AcceptVpcPeeringConnection",
      "ec2:AllocateAddress",
      "ec2:AllocateHosts",
      "ec2:AssignIpv6Addresses",
      "ec2:AssignPrivateIpAddresses",
      "ec2:AssociateAddress",
      "ec2:AssociateDhcpOptions",
      "ec2:AssociateIamInstanceProfile",
      "ec2:AssociateRouteTable",
      "ec2:AssociateSubnetCidrBlock",
      "ec2:AssociateVpcCidrBlock",
      "ec2:AttachClassicLinkVpc",
      "ec2:AttachInternetGateway",
      "ec2:AttachNetworkInterface",
      "ec2:AttachVolume",
      "ec2:AttachVpnGateway",
      "ec2:AuthorizeSecurityGroupEgress",
      "ec2:AuthorizeSecurityGroupIngress",
      "ec2:BundleInstance",
      "ec2:CancelBundleTask",
      "ec2:CancelConversionTask",
      "ec2:CancelExportTask",
      "ec2:CancelImportTask",
      "ec2:CancelReservedInstancesListing",
      "ec2:CancelSpotFleetRequests",
      "ec2:CancelSpotInstanceRequests",
      "ec2:ConfirmProductInstance",
      "ec2:CopyImage",
      "ec2:CopySnapshot",
      "ec2:CreateCustomerGateway",
      "ec2:CreateDhcpOptions",
      "ec2:CreateEgressOnlyInternetGateway",
      "ec2:CreateFlowLogs",
      "ec2:CreateFpgaImage",
      "ec2:CreateImage",
      "ec2:CreateInstanceExportTask",
      "ec2:CreateInternetGateway",
      "ec2:CreateKeyPair",
      "ec2:CreateNatGateway",
      "ec2:CreateNetworkAcl",
      "ec2:CreateNetworkAclEntry",
      "ec2:CreateNetworkInterface",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:CreatePlacementGroup",
      "ec2:CreateReservedInstancesListing",
      "ec2:CreateRoute",
      "ec2:CreateRouteTable",
      "ec2:CreateSecurityGroup",
      "ec2:CreateSnapshot",
      "ec2:CreateSpotDatafeedSubscription",
      "ec2:CreateSubnet",
      "ec2:CreateTags",
      "ec2:CreateVolume",
      "ec2:CreateVpc",
      "ec2:CreateVpcEndpoint",
      "ec2:CreateVpcPeeringConnection",
      "ec2:CreateVpnConnection",
      "ec2:CreateVpnConnectionRoute",
      "ec2:CreateVpnGateway",
      "ec2:DeleteCustomerGateway",
      "ec2:DeleteDhcpOptions",
      "ec2:DeleteEgressOnlyInternetGateway",
      "ec2:DeleteFlowLogs",
      "ec2:DeleteInternetGateway",
      "ec2:DeleteKeyPair",
      "ec2:DeleteNatGateway",
      "ec2:DeleteNetworkAcl",
      "ec2:DeleteNetworkAclEntry",
      "ec2:DeleteNetworkInterface",
      "ec2:DeletePlacementGroup",
      "ec2:DeleteRoute",
      "ec2:DeleteRouteTable",
      "ec2:DeleteSecurityGroup",
      "ec2:DeleteSnapshot",
      "ec2:DeleteSpotDatafeedSubscription",
      "ec2:DeleteSubnet",
      "ec2:DeleteTags",
      "ec2:DeleteVolume",
      "ec2:DeleteVpc",
      "ec2:DeleteVpcEndpoints",
      "ec2:DeleteVpcPeeringConnection",
      "ec2:DeleteVpnConnection",
      "ec2:DeleteVpnConnectionRoute",
      "ec2:DeleteVpnGateway",
      "ec2:DeregisterImage",
      "ec2:DescribeAccountAttributes",
      "ec2:DescribeAddresses",
      "ec2:DescribeAvailabilityZones",
      "ec2:DescribeBundleTasks",
      "ec2:DescribeClassicLinkInstances",
      "ec2:DescribeConversionTasks",
      "ec2:DescribeCustomerGateways",
      "ec2:DescribeDhcpOptions",
      "ec2:DescribeEgressOnlyInternetGateways",
      "ec2:DescribeExportTasks",
      "ec2:DescribeFlowLogs",
      "ec2:DescribeFpgaImages",
      "ec2:DescribeHosts",
      "ec2:DescribeHostReservations",
      "ec2:DescribeHostReservationOfferings",
      "ec2:DescribeIamInstanceProfileAssociations",
      "ec2:DescribeIdentityIdFormat",
      "ec2:DescribeIdFormat",
      "ec2:DescribeImageAttribute",
      "ec2:DescribeImages",
      "ec2:DescribeImportImageTasks",
      "ec2:DescribeImportSnapshotTasks",
      "ec2:DescribeInstanceAttribute",
      "ec2:DescribeInstanceStatus",
      "ec2:DescribeInstances",
      "ec2:DescribeInternetGateways",
      "ec2:DescribeKeyPairs",
      "ec2:DescribeMovingAddresses",
      "ec2:DescribeNatGateways",
      "ec2:DescribeNetworkAcls",
      "ec2:DescribeNetworkInterfaceAttribute",
      "ec2:DescribeNetworkInterfaces",
      "ec2:DescribePlacementGroups",
      "ec2:DescribePrefixLists",
      "ec2:DescribeRegions",
      "ec2:DescribeReservedInstances",
      "ec2:DescribeReservedInstancesListings",
      "ec2:DescribeReservedInstancesModifications",
      "ec2:DescribeReservedInstancesOfferings",
      "ec2:DescribeRouteTables",
      "ec2:DescribeSecurityGroups",
      "ec2:DescribeSnapshotAttribute",
      "ec2:DescribeSnapshots",
      "ec2:DescribeSpotDatafeedSubscription",
      "ec2:DescribeSpotFleetInstances",
      "ec2:DescribeSpotFleetRequestHistory",
      "ec2:DescribeSpotFleetRequests",
      "ec2:DescribeSpotInstanceRequests",
      "ec2:DescribeSpotPriceHistory",
      "ec2:DescribeStaleSecurityGroups",
      "ec2:DescribeSubnets",
      "ec2:DescribeTags",
      "ec2:DescribeVolumeAttribute",
      "ec2:DescribeVolumesModifications",
      "ec2:DescribeVolumeStatus",
      "ec2:DescribeVolumes",
      "ec2:DescribeVpcAttribute",
      "ec2:DescribeVpcClassicLink",
      "ec2:DescribeVpcEndpointServices",
      "ec2:DescribeVpcEndpoints",
      "ec2:DescribeVpcPeeringConnections",
      "ec2:DescribeVpcs",
      "ec2:DescribeVpnConnections",
      "ec2:DescribeVpnGateways",
      "ec2:DetachClassicLinkVpc",
      "ec2:DetachInternetGateway",
      "ec2:DetachNetworkInterface",
      "ec2:DetachVolume",
      "ec2:DetachVpnGateway",
      "ec2:DisableVgwRoutePropagation",
      "ec2:DisableVpcClassicLink",
      "ec2:DisableVpcClassicLinkDnsSupport",
      "ec2:DescribeVpcClassicLinkDnsSupport",
      "ec2:DisassociateAddress",
      "ec2:DisassociateIamInstanceProfile",
      "ec2:DisassociateRouteTable",
      "ec2:DisassociateSubnetCidrBlock",
      "ec2:DisassociateVpcCidrBlock",
      "ec2:EnableVgwRoutePropagation",
      "ec2:EnableVolumeIO",
      "ec2:EnableVpcClassicLink",
      "ec2:EnableVpcClassicLinkDnsSupport",
      "ec2:GetConsoleOutput",
      "ec2:GetConsoleScreenshot",
      "ec2:GetHostReservationPurchasePreview",
      "ec2:GetPasswordData",
      "ec2:GetReservedInstancesExchangeQuote",
      "ec2:ImportImage",
      "ec2:ImportInstance",
      "ec2:ImportKeyPair",
      "ec2:ImportSnapshot",
      "ec2:ImportVolume",
      "ec2:ModifyHosts",
      "ec2:ModifyIdentityIdFormat",
      "ec2:ModifyIdFormat",
      "ec2:ModifyImageAttribute",
      "ec2:ModifyInstanceAttribute",
      "ec2:ModifyInstancePlacement",
      "ec2:ModifyNetworkInterfaceAttribute",
      "ec2:ModifyReservedInstances",
      "ec2:ModifySnapshotAttribute",
      "ec2:ModifySpotFleetRequest",
      "ec2:ModifySubnetAttribute",
      "ec2:ModifyVolume",
      "ec2:ModifyVolumeAttribute",
      "ec2:ModifyVpcAttribute",
      "ec2:ModifyVpcEndpoint",
      "ec2:ModifyVpcPeeringConnectionOptions",
      "ec2:MonitorInstances",
      "ec2:MoveAddressToVpc",
      "ec2:PurchaseHostReservation",
      "ec2:PurchaseReservedInstancesOffering",
      "ec2:PurchaseScheduledInstances",
      "ec2:RebootInstances",
      "ec2:RegisterImage",
      "ec2:RejectVpcPeeringConnection",
      "ec2:ReleaseAddress",
      "ec2:ReleaseHosts",
      "ec2:ReplaceIamInstanceProfileAssociation",
      "ec2:ReplaceNetworkAclAssociation",
      "ec2:ReplaceNetworkAclEntry",
      "ec2:ReplaceRoute",
      "ec2:ReplaceRouteTableAssociation",
      "ec2:ReportInstanceStatus",
      "ec2:RequestSpotFleet",
      "ec2:RequestSpotInstances",
      "ec2:ResetImageAttribute",
      "ec2:ResetInstanceAttribute",
      "ec2:ResetNetworkInterfaceAttribute",
      "ec2:ResetSnapshotAttribute",
      "ec2:RestoreAddressToClassic",
      "ec2:RevokeSecurityGroupEgress",
      "ec2:RevokeSecurityGroupIngress",
      "ec2:RunInstances",
      "ec2:RunScheduledInstances",
      "ec2:StartInstances",
      "ec2:StopInstances",
      "ec2:TerminateInstances",
      "ec2:UnassignIpv6Addresses",
      "ec2:UnassignPrivateIpAddresses",
      "ec2:UnmonitorInstances",
      "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
      "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
      "ec2:CancelSpotFleetRequests",
      "ec2:DescribeSpotFleetInstances",
      "ec2:DescribeSpotFleetRequests",
      "ec2:DescribeSpotFleetRequestHistory",
      "ec2:ModifySpotFleetRequest",
      "ec2:RequestSpotFleet",
    """

  'All dynamodb Actions':
    'prefix': 'dynamodb:'
    'body': """
      "dynamodb:BatchGetItem",
      "dynamodb:BatchWriteItem",
      "dynamodb:CreateTable",
      "dynamodb:DeleteItem",
      "dynamodb:DeleteTable",
      "dynamodb:DescribeLimits",
      "dynamodb:DescribeReservedCapacity",
      "dynamodb:DescribeReservedCapacityOfferings",
      "dynamodb:DescribeStream",
      "dynamodb:DescribeTable",
      "dynamodb:GetItem",
      "dynamodb:GetRecords",
      "dynamodb:GetShardIterator",
      "dynamodb:ListStreams",
      "dynamodb:ListTables",
      "dynamodb:ListTagsOfResource",
      "dynamodb:PurchaseReservedCapacityOfferings",
      "dynamodb:PutItem",
      "dynamodb:Query",
      "dynamodb:Scan",
      "dynamodb:TagResource",
      "dynamodb:UpdateItem",
      "dynamodb:UpdateTable",
      "dynamodb:UntagResource",
    """

  'All dax Actions':
    'prefix': 'dax:'
    'body': """
      "dax:BatchGetItem",
      "dax:BatchWriteItem",
      "dax:CreateCluster",
      "dax:CreateParameterGroup",
      "dax:CreateSubnetGroup",
      "dax:DecreaseReplicationFactor",
      "dax:DefineAttributeList",
      "dax:DefineAttributeListId",
      "dax:DefineKeySchema",
      "dax:DeleteCluster",
      "dax:DeleteItem",
      "dax:DeleteParameterGroup",
      "dax:DeleteSubnetGroup",
      "dax:DescribeClusters",
      "dax:DescribeDefaultParameters",
      "dax:DescribeEvents",
      "dax:DescribeParameterGroups",
      "dax:DescribeParameters",
      "dax:DescribeSubnetGroups",
      "dax:Endpoints",
      "dax:GetItem",
      "dax:IncreaseReplicationFactor",
      "dax:ListTags",
      "dax:PutItem",
      "dax:Query",
      "dax:RebootNode",
      "dax:Scan",
      "dax:TagResource",
      "dax:UntagResource",
      "dax:UpdateCluster",
      "dax:UpdateItem",
      "dax:UpdateParameterGroup",
      "dax:UpdateSubnetGroup",
    """

  'All glacier Actions':
    'prefix': 'glacier:'
    'body': """
      "glacier:AbortVaultLock",
      "glacier:AddTagsToVault",
      "glacier:AbortMultipartUpload",
      "glacier:CompleteMultipartUpload",
      "glacier:CompleteVaultLock",
      "glacier:CreateVault",
      "glacier:DeleteArchive",
      "glacier:DeleteVault",
      "glacier:DeleteVaultAccessPolicy",
      "glacier:DeleteVaultNotifications",
      "glacier:DescribeJob",
      "glacier:DescribeVault",
      "glacier:GetDataRetrievalPolicy",
      "glacier:GetJobOutput",
      "glacier:GetVaultAccessPolicy",
      "glacier:GetVaultLock",
      "glacier:GetVaultNotifications",
      "glacier:InitiateJob",
      "glacier:InitiateMultipartUpload",
      "glacier:InitiateVaultLock",
      "glacier:ListJobs",
      "glacier:ListMultipartUploads",
      "glacier:ListParts",
      "glacier:ListTagsForVault",
      "glacier:ListVaults",
      "glacier:RemoveTagsFromVault",
      "glacier:SetDataRetrievalPolicy",
      "glacier:SetVaultAccessPolicy",
      "glacier:SetVaultNotifications",
      "glacier:UploadArchive",
      "glacier:UploadMultipartPart",
    """

  'All cloudfront Actions':
    'prefix': 'cloudfront:'
    'body': """
      "cloudfront:CreateCloudFrontOriginAccessIdentity",
      "cloudfront:CreateDistribution",
      "cloudfront:CreateInvalidation",
      "cloudfront:CreateStreamingDistribution",
      "cloudfront:DeleteCloudFrontOriginAccessIdentity",
      "cloudfront:DeleteDistribution",
      "cloudfront:DeleteStreamingDistribution",
      "cloudfront:GetCloudFrontOriginAccessIdentity",
      "cloudfront:GetCloudFrontOriginAccessIdentityConfig",
      "cloudfront:GetDistribution",
      "cloudfront:GetDistributionConfig",
      "cloudfront:GetInvalidation",
      "cloudfront:GetStreamingDistribution",
      "cloudfront:GetStreamingDistributionConfig",
      "cloudfront:ListCloudFrontOriginAccessIdentities",
      "cloudfront:ListDistributions",
      "cloudfront:ListDistributionsByWebACLId",
      "cloudfront:ListInvalidations",
      "cloudfront:ListStreamingDistributions",
      "cloudfront:UpdateCloudFrontOriginAccessIdentity",
      "cloudfront:UpdateDistribution",
      "cloudfront:UpdateStreamingDistribution",
    """

  'All sts Actions':
    'prefix': 'sts:'
    'body': """
      "sts:AssumeRole",
      "sts:AssumeRoleWithSAML",
      "sts:AssumeRoleWithWebIdentity",
      "sts:DecodeAuthorizationMessage",
      "sts:GetFederationToken",
      "sts:GetSessionToken",
    """

  'All workdocs Actions':
    'prefix': 'workdocs:'
    'body': """
      "workdocs:ActivateUser",
      "workdocs:AddUserToGroup",
      "workdocs:CheckAlias",
      "workdocs:CreateInstance",
      "workdocs:DeactivateUser",
      "workdocs:DeleteInstance",
      "workdocs:DeregisterDirectory",
      "workdocs:DescribeAvailableDirectories",
      "workdocs:DescribeInstances",
      "workdocs:RegisterDirectory",
      "workdocs:RemoveUserFromGroup",
      "workdocs:UpdateInstanceAlias",
    """

  'All ds Actions':
    'prefix': 'ds:'
    'body': """
      "ds:AddIpRoutes",
      "ds:AddTagsToResource",
      "ds:CancelSchemaExtension",
      "ds:ConnectDirectory",
      "ds:CreateAlias",
      "ds:CreateComputer",
      "ds:CreateConditionalForwarder",
      "ds:CreateDirectory",
      "ds:CreateMicrosoftAD",
      "ds:CreateSnapshot",
      "ds:CreateTrust",
      "ds:DeleteConditionalForwarder",
      "ds:DeleteDirectory",
      "ds:DeleteSnapshot",
      "ds:DeleteTrust",
      "ds:DeregisterEventTopic",
      "ds:DescribeConditionalForwarders",
      "ds:DescribeDirectories",
      "ds:DescribeEventTopics",
      "ds:DescribeSnapshots",
      "ds:DescribeTrusts",
      "ds:DisableRadius",
      "ds:DisableSso",
      "ds:EnableRadius",
      "ds:EnableSso",
      "ds:GetDirectoryLimits",
      "ds:GetSnapshotLimits",
      "ds:ListIpRoutes",
      "ds:ListTagsForResource",
      "ds:ListSchemaExtensions",
      "ds:RegisterEventTopic",
      "ds:RemoveIpRoutes",
      "ds:RemoveTagsFromResource",
      "ds:RestoreFromSnapshot",
      "ds:StartSchemaExtension",
      "ds:UpdateConditionalForwarder",
      "ds:UpdateRadius",
      "ds:VerifyTrust",
    """

  'All elasticache Actions':
    'prefix': 'elasticache:'
    'body': """
      "elasticache:AddTagsToResource",
      "elasticache:AuthorizeCacheSecurityGroupIngress",
      "elasticache:CopySnapshot",
      "elasticache:CreateCacheCluster",
      "elasticache:CreateCacheParameterGroup",
      "elasticache:CreateCacheSecurityGroup",
      "elasticache:CreateCacheSubnetGroup",
      "elasticache:CreateReplicationGroup",
      "elasticache:CreateSnapshot",
      "elasticache:DeleteCacheCluster",
      "elasticache:DeleteCacheParameterGroup",
      "elasticache:DeleteCacheSecurityGroup",
      "elasticache:DeleteCacheSubnetGroup",
      "elasticache:DeleteReplicationGroup",
      "elasticache:DeleteSnapshot",
      "elasticache:DescribeCacheClusters",
      "elasticache:DescribeCacheEngineVersions",
      "elasticache:DescribeCacheParameterGroups",
      "elasticache:DescribeCacheParameters",
      "elasticache:DescribeCacheSecurityGroups",
      "elasticache:DescribeCacheSubnetGroups",
      "elasticache:DescribeEngineDefaultParameters",
      "elasticache:DescribeEvents",
      "elasticache:DescribeReplicationGroups",
      "elasticache:DescribeReservedCacheNodes",
      "elasticache:DescribeReservedCacheNodesOfferings",
      "elasticache:DescribeSnapshots",
      "elasticache:ListAllowedNodeTypeModifications",
      "elasticache:ListTagsForResource",
      "elasticache:ModifyCacheCluster",
      "elasticache:ModifyCacheParameterGroup",
      "elasticache:ModifyCacheSubnetGroup",
      "elasticache:ModifyReplicationGroup",
      "elasticache:PurchaseReservedCacheNodesOffering",
      "elasticache:RebootCacheCluster",
      "elasticache:RemoveTagsFromResource",
      "elasticache:ResetCacheParameterGroup",
      "elasticache:RevokeCacheSecurityGroupIngress",
    """

  'All logs Actions':
    'prefix': 'logs:'
    'body': """
      "logs:CancelExportTask",
      "logs:CreateExportTask",
      "logs:CreateLogGroup",
      "logs:CreateLogStream",
      "logs:DeleteDestination",
      "logs:DeleteLogGroup",
      "logs:DeleteLogStream",
      "logs:DeleteMetricFilter",
      "logs:DeleteRetentionPolicy",
      "logs:DeleteSubscriptionFilter",
      "logs:DescribeDestinations",
      "logs:DescribeExportTasks",
      "logs:DescribeLogGroups",
      "logs:DescribeLogStreams",
      "logs:DescribeMetricFilters",
      "logs:DescribeSubscriptionFilters",
      "logs:FilterLogEvents",
      "logs:GetLogEvents",
      "logs:PutDestination",
      "logs:PutDestinationPolicy",
      "logs:PutLogEvents",
      "logs:PutMetricFilter",
      "logs:PutRetentionPolicy",
      "logs:PutSubscriptionFilter",
      "logs:TestMetricFilter",
    """

  'All cognito-identity Actions':
    'prefix': 'cognito-identity:'
    'body': """
      "cognito-identity:CreateIdentityPool",
      "cognito-identity:DeleteIdentityPool",
      "cognito-identity:DeleteIdentities",
      "cognito-identity:DescribeIdentity",
      "cognito-identity:DescribeIdentityPool",
      "cognito-identity:GetIdentityPoolRoles",
      "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
      "cognito-identity:ListIdentities",
      "cognito-identity:ListIdentityPools",
      "cognito-identity:LookupDeveloperIdentity",
      "cognito-identity:MergeDeveloperIdentities",
      "cognito-identity:SetIdentityPoolRoles",
      "cognito-identity:UnlinkDeveloperIdentity",
      "cognito-identity:UpdateIdentityPool",
    """

  'All cognito-sync Actions':
    'prefix': 'cognito-sync:'
    'body': """
      "cognito-sync:BulkPublish",
      "cognito-sync:DeleteDataset",
      "cognito-sync:DescribeDataset",
      "cognito-sync:DescribeIdentityUsage",
      "cognito-sync:DescribeIdentityPoolUsage",
      "cognito-sync:GetBulkPublishDetails",
      "cognito-sync:GetCognitoEvents",
      "cognito-sync:GetIdentityPoolConfiguration",
      "cognito-sync:ListDatasets",
      "cognito-sync:ListIdentityPoolUsage",
      "cognito-sync:ListRecords",
      "cognito-sync:RegisterDevice",
      "cognito-sync:SetCognitoEvents",
      "cognito-sync:SetIdentityPoolConfiguration",
      "cognito-sync:SubscribeToDataset",
      "cognito-sync:UpdateRecords",
      "cognito-sync:UnsubscribeFromDataset",
    """

  'All cognito-idp Actions':
    'prefix': 'cognito-idp:'
    'body': """
      "cognito-idp:AddCustomAttributes",
      "cognito-idp:AdminAddUserToGroup",
      "cognito-idp:AdminConfirmSignUp",
      "cognito-idp:AdminCreateUser",
      "cognito-idp:AdminDeleteUser",
      "cognito-idp:AdminDeleteUserAttributes",
      "cognito-idp:AdminDisableUser",
      "cognito-idp:AdminEnableUser",
      "cognito-idp:AdminForgetDevice",
      "cognito-idp:AdminGetDevice",
      "cognito-idp:AdminGetUser",
      "cognito-idp:AdminInitiateAuth",
      "cognito-idp:AdminListDevices",
      "cognito-idp:AdminListGroupsForUser",
      "cognito-idp:AdminRemoveUserFromGroup",
      "cognito-idp:AdminResetUserPassword",
      "cognito-idp:AdminRespondToAuthChallenge",
      "cognito-idp:AdminSetUserSettings",
      "cognito-idp:AdminUpdateDeviceStatus",
      "cognito-idp:AdminUpdateUserAttributes",
      "cognito-idp:AdminUserGlobalSignOut",
      "cognito-idp:CreateGroup",
      "cognito-idp:CreateUserImportJob",
      "cognito-idp:CreateUserPool",
      "cognito-idp:CreateUserPoolClient",
      "cognito-idp:DeleteGroup",
      "cognito-idp:DeleteUserPool",
      "cognito-idp:DeleteUserPoolClient",
      "cognito-idp:DescribeUserImportJob",
      "cognito-idp:DescribeUserPool",
      "cognito-idp:DescribeUserPoolClient",
      "cognito-idp:GetCSVHeader",
      "cognito-idp:GetGroup",
      "cognito-idp:ListGroups",
      "cognito-idp:ListUserImportJobs",
      "cognito-idp:ListUserPoolClients",
      "cognito-idp:ListUserPools",
      "cognito-idp:ListUsers",
      "cognito-idp:ListUsersInGroup",
      "cognito-idp:StartUserImportJob",
      "cognito-idp:StopUserImportJob",
      "cognito-idp:UpdateGroup",
      "cognito-idp:UpdateUserPool",
      "cognito-idp:UpdateUserPoolClient",
    """

  'All mobileanalytics Actions':
    'prefix': 'mobileanalytics:'
    'body': """
      "mobileanalytics:PutEvents",
      "mobileanalytics:GetReports",
      "mobileanalytics:GetFinancialReports",
    """

  'All route53domains Actions':
    'prefix': 'route53domains:'
    'body': """
      "route53domains:CheckDomainAvailability",
      "route53domains:DeleteDomain",
      "route53domains:DeleteTagsForDomain",
      "route53domains:DisableDomainAutoRenew",
      "route53domains:DisableDomainTransferLock",
      "route53domains:EnableDomainAutoRenew",
      "route53domains:EnableDomainTransferLock",
      "route53domains:GetContactReachabilityStatus",
      "route53domains:GetDomainDetail",
      "route53domains:GetDomainSuggestions",
      "route53domains:GetOperationDetail",
      "route53domains:ListDomains",
      "route53domains:ListOperations",
      "route53domains:ListTagsForDomain",
      "route53domains:RegisterDomain",
      "route53domains:RenewDomain",
      "route53domains:ResendContactReachabilityEmail",
      "route53domains:RetrieveDomainAuthCode",
      "route53domains:TransferDomain",
      "route53domains:UpdateDomainContact",
      "route53domains:UpdateDomainContactPrivacy",
      "route53domains:UpdateDomainNameservers",
      "route53domains:UpdateTagsForDomain",
      "route53domains:ViewBilling",
    """

  'All kms Actions':
    'prefix': 'kms:'
    'body': """
      "kms:CancelKeyDeletion",
      "kms:CreateAlias",
      "kms:CreateGrant",
      "kms:CreateKey",
      "kms:Decrypt",
      "kms:DeleteAlias",
      "kms:DeleteImportedKeyMaterial",
      "kms:DescribeKey",
      "kms:DisableKey",
      "kms:DisableKeyRotation",
      "kms:EnableKey",
      "kms:EnableKeyRotation",
      "kms:Encrypt",
      "kms:GenerateDataKey",
      "kms:GenerateDataKeyWithoutPlaintext",
      "kms:GenerateRandom",
      "kms:GetKeyPolicy",
      "kms:GetKeyRotationStatus",
      "kms:GetParametersForImport",
      "kms:ImportKeyMaterial",
      "kms:ListAliases",
      "kms:ListGrants",
      "kms:ListKeyPolicies",
      "kms:ListKeys",
      "kms:ListResourceTags",
      "kms:ListRetirableGrants",
      "kms:PutKeyPolicy",
      "kms:ReEncryptFrom",
      "kms:ReEncryptTo",
      "kms:ReEncrypt*",
      "kms:RevokeGrant",
      "kms:ScheduleKeyDeletion",
      "kms:TagResource",
      "kms:UntagResource",
      "kms:UpdateAlias",
      "kms:UpdateKeyDescription",
    """

  'All aws-portal Actions':
    'prefix': 'aws-portal:'
    'body': """
      "aws-portal:ModifyAccount",
      "aws-portal:ModifyBilling",
      "aws-portal:ModifyPaymentMethods",
      "aws-portal:ViewAccount",
      "aws-portal:ViewBilling",
      "aws-portal:ViewPaymentMethods",
      "aws-portal:ViewUsage",
    """

  'All codestar Actions':
    'prefix': 'codestar:'
    'body': """
      "codestar:AssociateTeamMember",
      "codestar:CreateProject",
      "codestar:CreateUserProfile",
      "codestar:DeleteExtendedAccess",
      "codestar:DeleteProject",
      "codestar:DeleteUserProfile",
      "codestar:DescribeProject",
      "codestar:DescribeUserProfile",
      "codestar:DisassociateTeamMember",
      "codestar:GetExtendedAccess",
      "codestar:ListProjects",
      "codestar:ListResources",
      "codestar:ListTeamMembers",
      "codestar:ListUserProfiles",
      "codestar:PutExtendedAccess",
      "codestar:UpdateProject",
      "codestar:UpdateTeamMember",
      "codestar:UpdateUserProfile",
      "codestar:VerifyServiceRole",
    """

  'All directconnect Actions':
    'prefix': 'directconnect:'
    'body': """
      "directconnect:AllocateConnectionOnInterconnect",
      "directconnect:AllocatePrivateVirtualInterface",
      "directconnect:AllocatePublicVirtualInterface",
      "directconnect:ConfirmConnection",
      "directconnect:ConfirmPrivateVirtualInterface",
      "directconnect:ConfirmPublicVirtualInterface",
      "directconnect:CreateConnection",
      "directconnect:CreateInterconnect",
      "directconnect:CreatePrivateVirtualInterface",
      "directconnect:CreatePublicVirtualInterface",
      "directconnect:DeleteConnection",
      "directconnect:DeleteInterconnect",
      "directconnect:DeleteVirtualInterface",
      "directconnect:DescribeConnections",
      "directconnect:DescribeConnectionsOnInterconnect",
      "directconnect:DescribeInterconnects",
      "directconnect:DescribeLocations",
      "directconnect:DescribeVirtualGateways",
      "directconnect:DescribeVirtualInterfaces",
    """

  'All aws-marketplace Actions':
    'prefix': 'aws-marketplace:'
    'body': """
      "aws-marketplace:Subscribe",
      "aws-marketplace:Unsubscribe",
      "aws-marketplace:ViewSubscriptions",
      "aws-marketplace:MeterUsage",
      "aws-marketplace:BatchMeterUsage",
      "aws-marketplace:ResolveCustomer",
    """

  'All aws-marketplace-management Actions':
    'prefix': 'aws-marketplace-management:'
    'body': """
      "aws-marketplace-management:uploadFiles",
      "aws-marketplace-management:viewMarketing",
      "aws-marketplace-management:viewReports",
      "aws-marketplace-management:viewSupport",
    """

  'All servicecatalog Actions':
    'prefix': 'servicecatalog:'
    'body': """
      "servicecatalog:AcceptPortfolioShare",
      "servicecatalog:AssociatePrincipalWithPortfolio",
      "servicecatalog:AssociateProductWithPortfolio",
      "servicecatalog:CreateConstraint",
      "servicecatalog:CreatePortfolio",
      "servicecatalog:CreatePortfolioShare",
      "servicecatalog:CreateProduct",
      "servicecatalog:CreateProvisioningArtifact",
      "servicecatalog:DeleteConstraint",
      "servicecatalog:DeletePortfolio",
      "servicecatalog:DeletePortfolioShare",
      "servicecatalog:DeleteProduct",
      "servicecatalog:DeleteProvisioningArtifact",
      "servicecatalog:DescribeConstraint",
      "servicecatalog:DescribePortfolio",
      "servicecatalog:DescribeProduct",
      "servicecatalog:DescribeProductAsAdmin",
      "servicecatalog:DescribeProductView",
      "servicecatalog:DescribeProvisioningArtifact",
      "servicecatalog:DescribeProvisioningParameters",
      "servicecatalog:DescribeRecord",
      "servicecatalog:DisassociatePrincipalFromPortfolio",
      "servicecatalog:DisassociateProductFromPortfolio",
      "servicecatalog:ListAcceptedPortfolioShares",
      "servicecatalog:ListConstraintsForPortfolio",
      "servicecatalog:ListLaunchPaths",
      "servicecatalog:ListPortfolioAccess",
      "servicecatalog:ListPortfolios",
      "servicecatalog:ListPortfoliosForProduct",
      "servicecatalog:ListPrincipalsForPortfolio",
      "servicecatalog:ListProvisioningArtifacts",
      "servicecatalog:ListRecordHistory",
      "servicecatalog:ProvisionProduct",
      "servicecatalog:RejectPortfolioShare",
      "servicecatalog:ScanProvisionedProducts",
      "servicecatalog:SearchProducts",
      "servicecatalog:SearchProductsAsAdmin",
      "servicecatalog:TerminateProvisionedProduct",
      "servicecatalog:UpdateConstraint",
      "servicecatalog:UpdatePortfolio",
      "servicecatalog:UpdateProduct",
      "servicecatalog:UpdateProvisionedProduct",
      "servicecatalog:UpdateProvisioningArtifact",
    """

  'All shield Actions':
    'prefix': 'shield:'
    'body': """
      "shield:CreateProtection",
      "shield:CreateSubscription",
      "shield:DeleteProtection",
      "shield:DeleteSubscription",
      "shield:DescribeAttack",
      "shield:DescribeProtection",
      "shield:DescribeSubscription",
      "shield:ListAttacks",
      "shield:ListProtections",
    """

  'All states Actions':
    'prefix': 'states:'
    'body': """
      "states:CreateActivity",
      "states:CreateStateMachine",
      "states:DeleteActivity",
      "states:DeleteStateMachine",
      "states:DescribeActivity",
      "states:DescribeExecution",
      "states:DescribeStateMachine",
      "states:GetActivityTask",
      "states:GetExecutionHistory",
      "states:ListActivities",
      "states:ListExecutions",
      "states:ListStateMachines",
      "states:SendTaskFailure",
      "states:SendTaskHeartbeat",
      "states:SendTaskSuccess",
      "states:StartExecution",
      "states:StopExecution",
    """

  'All trustedadvisor Actions':
    'prefix': 'trustedadvisor:'
    'body': """
      "trustedadvisor:DescribeCheckItems",
      "trustedadvisor:DescribeCheckRefreshStatuses",
      "trustedadvisor:DescribeCheckSummaries",
      "trustedadvisor:DescribeNotificationPreferences",
      "trustedadvisor:ExcludeCheckItems",
      "trustedadvisor:IncludeCheckItems",
      "trustedadvisor:RefreshCheck",
      "trustedadvisor:UpdateNotificationPreferences",
    """

  'All opsworks Actions':
    'prefix': 'opsworks:'
    'body': """
      "opsworks:AssignInstance",
      "opsworks:AssignVolume",
      "opsworks:AssociateElasticIp",
      "opsworks:AttachElasticLoadBalancer",
      "opsworks:CloneStack",
      "opsworks:CreateApp",
      "opsworks:CreateDeployment",
      "opsworks:CreateInstance",
      "opsworks:CreateLayer",
      "opsworks:CreateStack",
      "opsworks:CreateUserProfile",
      "opsworks:DeleteApp",
      "opsworks:DeleteInstance",
      "opsworks:DeleteLayer",
      "opsworks:DeleteStack",
      "opsworks:DeleteUserProfile",
      "opsworks:DeregisterEcsCluster",
      "opsworks:DeregisterElasticIp",
      "opsworks:DeregisterInstance",
      "opsworks:DeregisterVolume",
      "opsworks:DescribeApps",
      "opsworks:DescribeCommands",
      "opsworks:DescribeDeployments",
      "opsworks:DescribeEcsClusters",
      "opsworks:DescribeElasticIps",
      "opsworks:DescribeElasticLoadBalancers",
      "opsworks:DescribeInstances",
      "opsworks:DescribeLayers",
      "opsworks:DescribeLoadBasedAutoScaling",
      "opsworks:DescribePermissions",
      "opsworks:DescribeRaidArrays",
      "opsworks:DescribeRdsDbInstances",
      "opsworks:DescribeServiceErrors",
      "opsworks:DescribeStackProvisioningParameters",
      "opsworks:DescribeStackSummary",
      "opsworks:DescribeStacks",
      "opsworks:DescribeTimeBasedAutoScaling",
      "opsworks:DescribeUserProfiles",
      "opsworks:DescribeVolumes",
      "opsworks:DetachElasticLoadBalancer",
      "opsworks:DisassociateElasticIp",
      "opsworks:GetHostnameSuggestion",
      "opsworks:GrantAccess",
      "opsworks:RebootInstance",
      "opsworks:RegisterEcsCluster",
      "opsworks:RegisterElasticIp",
      "opsworks:RegisterInstance",
      "opsworks:RegisterRdsDbInstance",
      "opsworks:RegisterVolume",
      "opsworks:SetLoadBasedAutoScaling",
      "opsworks:SetPermission",
      "opsworks:SetTimeBasedAutoScaling",
      "opsworks:StartInstance",
      "opsworks:StartStack",
      "opsworks:StopInstance",
      "opsworks:StopStack",
      "opsworks:UnassignInstance",
      "opsworks:UnassignVolume",
      "opsworks:UpdateApp",
      "opsworks:UpdateElasticIp",
      "opsworks:UpdateInstance",
      "opsworks:UpdateLayer",
      "opsworks:UpdateMyUserProfile",
      "opsworks:UpdateRdsDbInstance",
      "opsworks:UpdateStack",
      "opsworks:UpdateUserProfile",
      "opsworks:UpdateVolume",
    """

  'All opsworks-cm Actions':
    'prefix': 'opsworks-cm:'
    'body': """
      "opsworks-cm:AssociateNode",
      "opsworks-cm:CreateBackup",
      "opsworks-cm:CreateServer",
      "opsworks-cm:DeleteBackup",
      "opsworks-cm:DeleteServer",
      "opsworks-cm:DescribeAccountAttributes",
      "opsworks-cm:DescribeBackups",
      "opsworks-cm:DescribeEvents",
      "opsworks-cm:DescribeNodeAssociationStatus",
      "opsworks-cm:DescribeServers",
      "opsworks-cm:DisassociateNode",
      "opsworks-cm:RestoreServer",
      "opsworks-cm:StartMaintenance",
      "opsworks-cm:UpdateServer",
      "opsworks-cm:UpdateServerEngineAttributes",
    """

  'All workmail Actions':
    'prefix': 'workmail:'
    'body': """
      "workmail:AddMembersToGroup",
      "workmail:CreateGroup",
      "workmail:CreateMailDomain",
      "workmail:CreateMailUser",
      "workmail:CreateOrganization",
      "workmail:DeleteOrganization",
      "workmail:DeleteMailDomain",
      "workmail:DeleteMobileDevice",
      "workmail:DescribeDirectories",
      "workmail:DescribeKmsKeys",
      "workmail:DescribeOrganizations",
      "workmail:DescribeMailDomains",
      "workmail:DescribeMailGroups",
      "workmail:DescribeMailUsers",
      "workmail:DisableMailGroups",
      "workmail:DisableMailUsers",
      "workmail:EnableMailDomain",
      "workmail:EnableMailUsers",
      "workmail:EnableMailGroups",
      "workmail:GetMailDomainDetails",
      "workmail:GetMailGroupDetails",
      "workmail:GetMailUserDetails",
      "workmail:GetMobileDeviceDetails",
      "workmail:GetMobileDevicesForUser",
      "workmail:GetMobilePolicyDetails",
      "workmail:ListMembersInMailGroup",
      "workmail:RemoveMembersFromGroup",
      "workmail:ResetUserPassword",
      "workmail:SearchMembers",
      "workmail:SetAdmin",
      "workmail:SetDefaultMailDomain",
      "workmail:SetMailGroupDetails",
      "workmail:SetMailUserDetails",
      "workmail:SetMobilePolicyDetails",
      "workmail:WipeMobileDevice",
    """

  'All ecs Actions':
    'prefix': 'ecs:'
    'body': """
      "ecs:CreateCluster",
      "ecs:CreateService",
      "ecs:DeleteCluster",
      "ecs:DeleteService",
      "ecs:DeregisterContainerInstance",
      "ecs:DeregisterTaskDefinition",
      "ecs:DescribeClusters",
      "ecs:DescribeContainerInstances",
      "ecs:DescribeServices",
      "ecs:DescribeTaskDefinition",
      "ecs:DescribeTasks",
      "ecs:DiscoverPollEndpoint",
      "ecs:ListClusters",
      "ecs:ListContainerInstances",
      "ecs:ListServices",
      "ecs:ListTaskDefinitionFamilies",
      "ecs:ListTaskDefinitions",
      "ecs:ListTasks",
      "ecs:Poll",
      "ecs:RegisterContainerInstance",
      "ecs:RegisterTaskDefinition",
      "ecs:RunTask",
      "ecs:StartTask",
      "ecs:StopTask",
      "ecs:StartTelemetrySession",
      "ecs:SubmitContainerStateChange",
      "ecs:SubmitTaskStateChange",
      "ecs:UpdateContainerAgent",
      "ecs:UpdateService",
    """

  'All lightsail Actions':
    'prefix': 'lightsail:'
    'body': """
      "lightsail:AllocateStaticIp",
      "lightsail:AttachStaticIp",
      "lightsail:CloseInstancePublicPorts",
      "lightsail:CreateDomain",
      "lightsail:CreateDomainEntry",
      "lightsail:CreateInstanceSnapshot",
      "lightsail:CreateInstances",
      "lightsail:CreateInstancesFromSnapshot",
      "lightsail:CreateKeyPair",
      "lightsail:DeleteDomain",
      "lightsail:DeleteDomainEntry",
      "lightsail:DeleteInstance",
      "lightsail:DeleteInstanceSnapshot",
      "lightsail:DeleteKeyPair",
      "lightsail:DetachStaticIp",
      "lightsail:DownloadDefaultKeyPair",
      "lightsail:GetActiveNames",
      "lightsail:GetBlueprints",
      "lightsail:GetBundles",
      "lightsail:GetDomain",
      "lightsail:GetDomains",
      "lightsail:GetInstance",
      "lightsail:GetInstanceAccessDetails",
      "lightsail:GetInstanceMetricData",
      "lightsail:GetInstancePortStates",
      "lightsail:GetInstanceSnapshot",
      "lightsail:GetInstanceSnapshots",
      "lightsail:GetInstanceState",
      "lightsail:GetInstances",
      "lightsail:GetKeyPair",
      "lightsail:GetKeyPairs",
      "lightsail:GetOperation",
      "lightsail:GetOperations",
      "lightsail:GetOperationsForResource",
      "lightsail:GetRegions",
      "lightsail:GetStaticIp",
      "lightsail:GetStaticIps",
      "lightsail:ImportKeyPair",
      "lightsail:IsVpcPeered",
      "lightsail:OpenInstancePublicPorts",
      "lightsail:PeerVpc",
      "lightsail:RebootInstance",
      "lightsail:ReleaseStaticIp",
      "lightsail:StartInstance",
      "lightsail:StopInstance",
      "lightsail:UnpeerVpc",
      "lightsail:UpdateDomainEntry",
    """

  'All machinelearning Actions':
    'prefix': 'machinelearning:'
    'body': """
      "machinelearning:AddTags",
      "machinelearning:CreateBatchPrediction",
      "machinelearning:CreateDataSourceFromRDS",
      "machinelearning:CreateDataSourceFromRedshift",
      "machinelearning:CreateDataSourceFromS3",
      "machinelearning:CreateEvaluation",
      "machinelearning:CreateMLModel",
      "machinelearning:CreateRealtimeEndpoint",
      "machinelearning:DeleteBatchPrediction",
      "machinelearning:DeleteDataSource",
      "machinelearning:DeleteEvaluation",
      "machinelearning:DeleteMLModel",
      "machinelearning:DeleteRealtimeEndpoint",
      "machinelearning:DeleteTags",
      "machinelearning:DescribeBatchPredictions",
      "machinelearning:DescribeDataSources",
      "machinelearning:DescribeEvaluations",
      "machinelearning:DescribeMLModels",
      "machinelearning:DescribeTags",
      "machinelearning:GetBatchPrediction",
      "machinelearning:GetDataSource",
      "machinelearning:GetEvaluation",
      "machinelearning:GetMLModel",
      "machinelearning:Predict",
      "machinelearning:UpdateBatchPrediction",
      "machinelearning:UpdateDataSource",
      "machinelearning:UpdateEvaluation",
      "machinelearning:UpdateMLModel",
    """

  'All rekognition Actions':
    'prefix': 'rekognition:'
    'body': """
      "rekognition:CompareFaces",
      "rekognition:CreateCollection",
      "rekognition:DeleteCollection",
      "rekognition:DeleteFaces",
      "rekognition:DetectFaces",
      "rekognition:DetectLabels",
      "rekognition:DetectModerationLabels",
      "rekognition:IndexFaces",
      "rekognition:ListCollections",
      "rekognition:ListFaces",
      "rekognition:SearchFaces",
      "rekognition:SearchFacesByImage",
    """

  'All workspaces Actions':
    'prefix': 'workspaces:'
    'body': """
      "workspaces:CreateTags",
      "workspaces:CreateWorkspaces",
      "workspaces:DeleteTags",
      "workspaces:DescribeTags",
      "workspaces:DescribeWorkspaceBundles",
      "workspaces:DescribeWorkspacesConnectionStatus",
      "workspaces:DescribeWorkspaceDirectories",
      "workspaces:DescribeWorkspaces",
      "workspaces:ModifyWorkspaceProperties",
      "workspaces:StartWorkspaces",
      "workspaces:StopWorkspaces",
      "workspaces:RebootWorkspaces",
      "workspaces:RebuildWorkspaces",
      "workspaces:TerminateWorkspaces",
    """

  'All wam Actions':
    'prefix': 'wam:'
    'body': """
      "wam:AuthenticatePackager",
    """

  'All datapipeline Actions':
    'prefix': 'datapipeline:'
    'body': """
      "datapipeline:ActivatePipeline",
      "datapipeline:AddTags",
      "datapipeline:CreatePipeline",
      "datapipeline:DeactivatePipeline",
      "datapipeline:DeletePipeline",
      "datapipeline:DescribeObjects",
      "datapipeline:DescribePipelines",
      "datapipeline:EvaluateExpression",
      "datapipeline:GetAccountLimits",
      "datapipeline:GetPipelineDefinition",
      "datapipeline:ListPipelines",
      "datapipeline:PollForTask",
      "datapipeline:PutAccountLimits",
      "datapipeline:PutPipelineDefinition",
      "datapipeline:QueryObjects",
      "datapipeline:RemoveTags",
      "datapipeline:ReportTaskProgress",
      "datapipeline:ReportTaskRunnerHeartbeat",
      "datapipeline:SetStatus",
      "datapipeline:SetTaskStatus",
      "datapipeline:ValidatePipelineDefinition",
    """

  'All codebuild Actions':
    'prefix': 'codebuild:'
    'body': """
      "codebuild:BatchGetBuilds",
      "codebuild:BatchGetProjects",
      "codebuild:CreateProject",
      "codebuild:DeleteProject",
      "codebuild:ListBuilds",
      "codebuild:ListBuildsForProject",
      "codebuild:ListConnectedOAuthAccounts",
      "codebuild:ListProjects",
      "codebuild:ListRepositories",
      "codebuild:PersistOAuthToken",
      "codebuild:StartBuild",
      "codebuild:StopBuild",
      "codebuild:UpdateProject",
    """

  'All cur Actions':
    'prefix': 'cur:'
    'body': """
      "cur:DeleteReportDefinition",
      "cur:DescribeReportDefinitions",
      "cur:PutReportDefinition",
    """

  'All organizations Actions':
    'prefix': 'organizations:'
    'body': """
      "organizations:AcceptHandshake",
      "organizations:AttachPolicy",
      "organizations:CancelHandshake",
      "organizations:CreateAccount",
      "organizations:CreateOrganization",
      "organizations:CreateOrganizationalUnit",
      "organizations:CreatePolicy",
      "organizations:DeclineHandshake",
      "organizations:DeleteOrganization",
      "organizations:DeleteOrganizationalUnit",
      "organizations:DeletePolicy",
      "organizations:DescribeAccount",
      "organizations:DescribeCreateAccountStatus",
      "organizations:DescribeHandshake",
      "organizations:DescribeOrganization",
      "organizations:DescribeOrganizationalUnit",
      "organizations:DescribePolicy",
      "organizations:DetachPolicy",
      "organizations:DisablePolicyType",
      "organizations:EnableAllFeatures",
      "organizations:EnablePolicyType",
      "organizations:InviteAccountToOrganization",
      "organizations:LeaveOrganization",
      "organizations:ListAccounts",
      "organizations:ListAccountsForParent",
      "organizations:ListChildren",
      "organizations:ListCreateAccountStatus",
      "organizations:ListHandshakesForAccount",
      "organizations:ListHandshakesForOrganization",
      "organizations:ListOrganizationalUnitsForParent",
      "organizations:ListParents",
      "organizations:ListPolicies",
      "organizations:ListPoliciesForTarget",
      "organizations:ListRoots",
      "organizations:ListTargetsForPolicy",
      "organizations:MoveAccount",
      "organizations:RemoveAccountFromOrganization",
      "organizations:UpdateOrganizationalUnit",
      "organizations:UpdatePolicy",
    """

  'All es Actions':
    'prefix': 'es:'
    'body': """
      "es:AddTags",
      "es:CreateElasticsearchDomain",
      "es:DeleteElasticsearchDomain",
      "es:DescribeElasticsearchDomain",
      "es:DescribeElasticsearchDomains",
      "es:DescribeElasticsearchDomainConfig",
      "es:ListDomainNames",
      "es:ListTags",
      "es:RemoveTags",
      "es:UpdateElasticsearchDomainConfig",
    """

  'All waf Actions':
    'prefix': 'waf:'
    'body': """
      "waf:CreateByteMatchSet",
      "waf:CreateIPSet",
      "waf:CreateRule",
      "waf:CreateRateBasedRule",
      "waf:CreateSizeConstraintSet",
      "waf:CreateSqlInjectionMatchSet",
      "waf:CreateWebACL",
      "waf:CreateXssMatchSet",
      "waf:DeleteByteMatchSet",
      "waf:DeleteIPSet",
      "waf:DeleteRule",
      "waf:DeleteRateBasedRule",
      "waf:DeleteSizeConstraintSet",
      "waf:DeleteSqlInjectionMatchSet",
      "waf:DeleteWebACL",
      "waf:DeleteXssMatchSet",
      "waf:GetByteMatchSet",
      "waf:GetChangeToken",
      "waf:GetChangeTokenStatus",
      "waf:GetIPSet",
      "waf:GetRule",
      "waf:GetRateBasedRule",
      "waf:GetRateBasedRuleManagedKeys",
      "waf:GetSampledRequests",
      "waf:GetSizeConstraintSet",
      "waf:GetSqlInjectionMatchSet",
      "waf:GetWebACL",
      "waf:GetXssMatchSet",
      "waf:ListByteMatchSets",
      "waf:ListIPSets",
      "waf:ListRules",
      "waf:ListRateBasedules",
      "waf:ListSizeConstraintSets",
      "waf:ListSqlInjectionMatchSets",
      "waf:ListWebACLs",
      "waf:ListXssMatchSets",
      "waf:UpdateByteMatchSet",
      "waf:UpdateIPSet",
      "waf:UpdateRule",
      "waf:UpdateRateBasedRule",
      "waf:UpdateSizeConstraintSet",
      "waf:UpdateSqlInjectionMatchSet",
      "waf:UpdateWebACL",
      "waf:UpdateXssMatchSet",
    """

  'All waf-regional Actions':
    'prefix': 'waf-regional:'
    'body': """
      "waf-regional:AssociateWebACL",
      "waf-regional:CreateByteMatchSet",
      "waf-regional:CreateIPSet",
      "waf-regional:CreateRule",
      "waf-regional:CreateRateBasedRule",
      "waf-regional:CreateSizeConstraintSet",
      "waf-regional:CreateSqlInjectionMatchSet",
      "waf-regional:CreateWebACL",
      "waf-regional:CreateXssMatchSet",
      "waf-regional:DeleteByteMatchSet",
      "waf-regional:DeleteIPSet",
      "waf-regional:DeleteRule",
      "waf-regional:DeleteRateBasedRule",
      "waf-regional:DeleteSizeConstraintSet",
      "waf-regional:DeleteSqlInjectionMatchSet",
      "waf-regional:DeleteWebACL",
      "waf-regional:DeleteXssMatchSet",
      "waf-regional:DisassociateWebACL",
      "waf-regional:GetByteMatchSet",
      "waf-regional:GetChangeToken",
      "waf-regional:GetChangeTokenStatus",
      "waf-regional:GetIPSet",
      "waf-regional:GetRule",
      "waf-regional:GetRateBasedRule",
      "waf-regional:GetRateBasedRuleManagedKeys",
      "waf-regional:GetSampledRequests",
      "waf-regional:GetSizeConstraintSet",
      "waf-regional:GetSqlInjectionMatchSet",
      "waf-regional:GetWebACL",
      "waf-regional:GetWebACLForResource",
      "waf-regional:GetXssMatchSet",
      "waf-regional:ListByteMatchSets",
      "waf-regional:ListIPSets",
      "waf-regional:ListResourcesForWebACL",
      "waf-regional:ListRules",
      "waf-regional:ListRateBasedules",
      "waf-regional:ListSizeConstraintSets",
      "waf-regional:ListSqlInjectionMatchSets",
      "waf-regional:ListWebACLs",
      "waf-regional:ListXssMatchSets",
      "waf-regional:UpdateByteMatchSet",
      "waf-regional:UpdateIPSet",
      "waf-regional:UpdateRule",
      "waf-regional:UpdateRateBasedRule",
      "waf-regional:UpdateSizeConstraintSet",
      "waf-regional:UpdateSqlInjectionMatchSet",
      "waf-regional:UpdateWebACL",
      "waf-regional:UpdateXssMatchSet",
    """

  'All inspector Actions':
    'prefix': 'inspector:'
    'body': """
      "inspector:AddAttributesToFindings",
      "inspector:CreateAssessmentTarget",
      "inspector:CreateAssessmentTemplate",
      "inspector:CreateResourceGroup",
      "inspector:DeleteAssessmentRun",
      "inspector:DeleteAssessmentTarget",
      "inspector:DeleteAssessmentTemplate",
      "inspector:DescribeAssessmentRuns",
      "inspector:DescribeAssessmentTargets",
      "inspector:DescribeAssessmentTemplates",
      "inspector:DescribeCrossAccountAccessRole",
      "inspector:DescribeFindings",
      "inspector:DescribeResourceGroups",
      "inspector:DescribeRulesPackages",
      "inspector:GetTelemetryMetadata",
      "inspector:ListAssessmentRunAgents",
      "inspector:ListAssessmentRuns",
      "inspector:ListAssessmentTargets",
      "inspector:ListAssessmentTemplates",
      "inspector:ListEventSubscriptions",
      "inspector:ListFindings",
      "inspector:ListRulesPackages",
      "inspector:ListTagsForResource",
      "inspector:PreviewAgents",
      "inspector:RegisterCrossAccountAccessRole",
      "inspector:RemoveAttributesFromFindings",
      "inspector:SetTagsForResource",
      "inspector:StartAssessmentRun",
      "inspector:StopAssessmentRun",
      "inspector:SubscribeToEvent",
      "inspector:UnsubscribeFromEvent",
      "inspector:UpdateAssessmentTarget",
    """

  'All kinesisanalytics Actions':
    'prefix': 'kinesisanalytics:'
    'body': """
      "kinesisanalytics:AddApplicationInput",
      "kinesisanalytics:AddApplicationOutput",
      "kinesisanalytics:AddApplicationReferenceDataSource",
      "kinesisanalytics:CreateApplication",
      "kinesisanalytics:DeleteApplication",
      "kinesisanalytics:DeleteApplicationOutput",
      "kinesisanalytics:DeleteApplicationReferenceDataSource",
      "kinesisanalytics:DescribeApplication",
      "kinesisanalytics:DiscoverInputSchema",
      "kinesisanalytics:GetApplicationState",
      "kinesisanalytics:ListApplications",
      "kinesisanalytics:StartApplication",
      "kinesisanalytics:StopApplication",
      "kinesisanalytics:UpdateApplication",
    """

  'All firehose Actions':
    'prefix': 'firehose:'
    'body': """
      "firehose:CreateDeliveryStream",
      "firehose:DeleteDeliveryStream",
      "firehose:DescribeDeliveryStream",
      "firehose:ListDeliveryStreams",
      "firehose:PutRecord",
      "firehose:PutRecordBatch",
      "firehose:UpdateDestination",
    """

  'All iot Actions':
    'prefix': 'iot:'
    'body': """
      "iot:AcceptCertificateTransfer",
      "iot:AttachPrincipalPolicy",
      "iot:AttachThingPrincipal",
      "iot:CancelCertificateTransfer",
      "iot:Connect",
      "iot:CreateCertificateFromCsr",
      "iot:CreateKeysAndCertificate",
      "iot:CreatePolicy",
      "iot:CreatePolicyVersion",
      "iot:CreateThing",
      "iot:CreateThingType",
      "iot:CreateTopicRule",
      "iot:DeleteCACertificate",
      "iot:DeleteCertificate",
      "iot:DeletePolicy",
      "iot:DeletePolicyVersion",
      "iot:DeleteRegistrationCode",
      "iot:DeleteThing",
      "iot:DeleteThingShadow",
      "iot:DeleteThingType",
      "iot:DeleteTopicRule",
      "iot:DeprecateThingType",
      "iot:DescribeCaCertificate",
      "iot:DescribeCertificate",
      "iot:DescribeEndpoint",
      "iot:DescribeThing",
      "iot:DescribeThingType",
      "iot:DetachPrincipalPolicy",
      "iot:DetachThingPrincipal",
      "iot:DisableTopicRule",
      "iot:EnableTopicRule",
      "iot:GetLoggingOptions",
      "iot:GetPolicy",
      "iot:GetPolicyVersion",
      "iot:GetRegistrationCode",
      "iot:GetThingShadow",
      "iot:GetTopicRule",
      "iot:ListCaCertificates",
      "iot:ListCertificates",
      "iot:ListCertificatesByCa",
      "iot:ListOutgoingCertificates",
      "iot:ListPolicies",
      "iot:ListPolicyPrincipals",
      "iot:ListPolicyVersions",
      "iot:ListPrincipalPolicies",
      "iot:ListPrincipalThings",
      "iot:ListThingPrincipals",
      "iot:ListThings",
      "iot:ListThingTypes",
      "iot:ListTopicRules",
      "iot:Publish",
      "iot:Receive",
      "iot:RegisterCACertificate",
      "iot:RegisterCertificate",
      "iot:RejectCertificateTransfer",
      "iot:ReplaceTopicRule",
      "iot:SetDefaultPolicyVersion",
      "iot:SetLoggingOptions",
      "iot:Subscribe",
      "iot:TransferCertificate",
      "iot:UpdateCACertificate",
      "iot:UpdateCertificate",
      "iot:UpdateThing",
      "iot:UpdateThingShadow",
    """

  'All gamelift Actions':
    'prefix': 'gamelift:'
    'body': """
      "gamelift:CreateAlias",
      "gamelift:CreateBuild",
      "gamelift:CreateFleet",
      "gamelift:CreateGameSession",
      "gamelift:CreatePlayerSession",
      "gamelift:CreatePlayerSessions",
      "gamelift:DeleteAlias",
      "gamelift:DeleteBuild",
      "gamelift:DeleteFleet",
      "gamelift:DeleteScalingPolicy",
      "gamelift:DescribeAlias",
      "gamelift:DescribeBuild",
      "gamelift:DescribeEC2InstanceLimits",
      "gamelift:DescribeFleetAttributes",
      "gamelift:DescribeFleetCapacity",
      "gamelift:DescribeFleetEvents",
      "gamelift:DescribeFleetPortSettings",
      "gamelift:DescribeFleetUtilization",
      "gamelift:DescribeGameSessions",
      "gamelift:DescribeGameSessionDetails",
      "gamelift:DescribeInstances",
      "gamelift:DescribePlayerSessions",
      "gamelift:DescribeRuntimeConfiguration",
      "gamelift:DescribeScalingPolicies",
      "gamelift:GetGameSessionLogUrl",
      "gamelift:GetInstanceAccess",
      "gamelift:ListAliases",
      "gamelift:ListBuilds",
      "gamelift:ListFleets",
      "gamelift:PutScalingPolicy",
      "gamelift:SearchGameSessions",
      "gamelift:RequestUploadCredentials",
      "gamelift:ResolveAlias",
      "gamelift:UpdateAlias",
      "gamelift:UpdateBuild",
      "gamelift:UpdateFleetAttributes",
      "gamelift:UpdateFleetCapacity",
      "gamelift:UpdateFleetPortSettings",
      "gamelift:UpdateGameSession",
      "gamelift:UpdateRuntimeConfiguration",
    """

  'All mechanicalturk Actions':
    'prefix': 'mechanicalturk:'
    'body': """
      "mechanicalturk:AcceptQualificationRequest",
      "mechanicalturk:ApproveAssignment",
      "mechanicalturk:ApproveRejectedAssignment",
      "mechanicalturk:AssignQualification",
      "mechanicalturk:AssociateQualificationWithWorker",
      "mechanicalturk:BlockWorker",
      "mechanicalturk:CreateHITType",
      "mechanicalturk:ChangeHITTypeOfHIT",
      "mechanicalturk:CreateHIT",
      "mechanicalturk:CreateHITWithHITType",
      "mechanicalturk:CreateQualificationType",
      "mechanicalturk:CreateWorkerBlock",
      "mechanicalturk:DeleteHIT",
      "mechanicalturk:DeleteQualificationType",
      "mechanicalturk:DeleteWorkerBlock",
      "mechanicalturk:DisableHIT",
      "mechanicalturk:DisassociateQualificationFromWorker",
      "mechanicalturk:DisposeHIT",
      "mechanicalturk:DisposeQualificationType",
      "mechanicalturk:ExtendHIT",
      "mechanicalturk:ForceExpireHIT",
      "mechanicalturk:GetAccountBalance",
      "mechanicalturk:GetAssignment",
      "mechanicalturk:GetAssignmentsForHIT",
      "mechanicalturk:GetBlockedWorkers",
      "mechanicalturk:GetBonusPayments",
      "mechanicalturk:GetFileUploadURL",
      "mechanicalturk:GetHIT",
      "mechanicalturk:GetHITsForQualificationType",
      "mechanicalturk:GetQualificationRequests",
      "mechanicalturk:GetQualificationScore",
      "mechanicalturk:GetQualificationType",
      "mechanicalturk:GetQualificationsForQualificationType",
      "mechanicalturk:GetRequesterStatistic",
      "mechanicalturk:GetRequesterWorkerStatistic",
      "mechanicalturk:GetReviewResultsForHIT",
      "mechanicalturk:GetReviewableHITs",
      "mechanicalturk:GrantBonus",
      "mechanicalturk:GrantQualification",
      "mechanicalturk:ListAssignmentsForHIT",
      "mechanicalturk:ListBonusPayments",
      "mechanicalturk:ListHITs",
      "mechanicalturk:ListHITsForQualificationType",
      "mechanicalturk:ListQualificationRequests",
      "mechanicalturk:ListQualificationTypes",
      "mechanicalturk:ListReviewableHITs",
      "mechanicalturk:ListReviewPolicyResultsForHIT",
      "mechanicalturk:ListWorkerBlocks",
      "mechanicalturk:ListWorkersWithQualificationType",
      "mechanicalturk:NotifyWorkers",
      "mechanicalturk:RegisterHITType",
      "mechanicalturk:RejectAssignment",
      "mechanicalturk:RejectQualificationRequest",
      "mechanicalturk:RevokeQualification",
      "mechanicalturk:SearchHITs",
      "mechanicalturk:SearchQualificationTypes",
      "mechanicalturk:SendBonus",
      "mechanicalturk:SendTestEventNotification",
      "mechanicalturk:SetHITAsReviewing",
      "mechanicalturk:SetHITTypeNotification",
      "mechanicalturk:UnblockWorker",
      "mechanicalturk:UpdateExpirationForHIT",
      "mechanicalturk:UpdateHITReviewStatus",
      "mechanicalturk:UpdateHITTypeOfHIT",
      "mechanicalturk:UpdateNotificationSettings",
      "mechanicalturk:UpdateQualificationScore",
      "mechanicalturk:UpdateQualificationType",
    """

  'All xray Actions':
    'prefix': 'xray:'
    'body': """
      "xray:BatchGetTraces",
      "xray:GetServiceGraph",
      "xray:GetTraceGraph",
      "xray:GetTraceSummaries",
      "xray:PutTelemetryRecords",
      "xray:PutTraceSegments",
    """

  'All athena Actions':
    'prefix': 'athena:'
    'body': """
      "athena:BatchGetNamedQuery",
      "athena:BatchGetQueryExecution",
      "athena:CancelQueryExecution",
      "athena:CreateNamedQuery",
      "athena:DeleteNamedQuery",
      "athena:GetCatalogs",
      "athena:GetExecutionEngine",
      "athena:GetExecutionEngines",
      "athena:GetNamedQuery",
      "athena:GetNamespace",
      "athena:GetNamespaces",
      "athena:GetQueryExecution",
      "athena:GetQueryExecutions",
      "athena:GetQueryResults",
      "athena:GetTable",
      "athena:GetTables",
      "athena:ListNamedQueries",
      "athena:ListQueryExecutions",
      "athena:RunQuery",
      "athena:StartQueryExecution",
      "athena:StopQueryExecution",
    """

  'All pricing Actions':
    'prefix': 'pricing:'
    'body': """
      "pricing:DescribeServices",
      "pricing:GetAttributeValues",
      "pricing:GetProducts",
    """
